
Nucleo-F401RE-ECE198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a8c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004c28  08004c28  00014c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e20  08004e20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e28  08004e28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08004ea0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004ea0  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c314  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001826  00000000  00000000  0002c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002e760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162d1  00000000  00000000  0002f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb3c  00000000  00000000  00045529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da72  00000000  00000000  00052065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e0  00000000  00000000  000dfb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004c0c 	.word	0x08004c0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004c0c 	.word	0x08004c0c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	0000      	movs	r0, r0
	...

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09e      	sub	sp, #120	; 0x78
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fddd 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f8ff 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 fa2d 	bl	8001314 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eba:	f000 fa01 	bl	80012c0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ebe:	f000 f963 	bl	8001188 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ec2:	f000 f9b1 	bl	8001228 <MX_TIM4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  float preX=0;
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	677b      	str	r3, [r7, #116]	; 0x74
  float curX=0;
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	673b      	str	r3, [r7, #112]	; 0x70

  float preY=0;
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
  float curY=0;
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	66bb      	str	r3, [r7, #104]	; 0x68

  float const interval= 0.01*timemultipler;
 8000ede:	4b74      	ldr	r3, [pc, #464]	; (80010b0 <main+0x208>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff facb 	bl	800047c <__aeabi_i2d>
 8000ee6:	a370      	add	r3, pc, #448	; (adr r3, 80010a8 <main+0x200>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f7ff fb30 	bl	8000550 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fe02 	bl	8000b00 <__aeabi_d2f>
 8000efc:	4603      	mov	r3, r0
 8000efe:	657b      	str	r3, [r7, #84]	; 0x54

  float deltaX=0;
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	667b      	str	r3, [r7, #100]	; 0x64

  float aveVel=0;
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	653b      	str	r3, [r7, #80]	; 0x50

  int velStage=0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	663b      	str	r3, [r7, #96]	; 0x60
  int lightStage=0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  int timer = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	65fb      	str	r3, [r7, #92]	; 0x5c

  int index=0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	65bb      	str	r3, [r7, #88]	; 0x58
  float xArray[10]={}; // 12 => every 0.6 seconds
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	2228      	movs	r2, #40	; 0x28
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 fad1 	bl	80034cc <memset>
  float velArray[9]={}; // every 0.6 seconds we calculate velocity
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2224      	movs	r2, #36	; 0x24
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 facb 	bl	80034cc <memset>

  // 1 tick = 1 us
  while (1)
  {
	  timer++;
 8000f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f38:	3301      	adds	r3, #1
 8000f3a:	65fb      	str	r3, [r7, #92]	; 0x5c



	  ////////////Testing3/////////
	  // stage machine to calculate average velocity
	  switch(velStage) {
 8000f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f3e:	2b05      	cmp	r3, #5
 8000f40:	f200 8091 	bhi.w	8001066 <main+0x1be>
 8000f44:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <main+0xa4>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f65 	.word	0x08000f65
 8000f50:	08000f9d 	.word	0x08000f9d
 8000f54:	08000fb3 	.word	0x08000fb3
 8000f58:	08000fdb 	.word	0x08000fdb
 8000f5c:	08001003 	.word	0x08001003
 8000f60:	08001053 	.word	0x08001053
	    case 0:
	      preX = MeasureDistance(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 fa93 	bl	8001490 <MeasureDistance>
 8000f6a:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		  preY = MeasureDistance(2);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f000 fa8e 	bl	8001490 <MeasureDistance>
 8000f74:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
		  if (timer>interval){ // every 0.01 seconds;
 8000f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f82:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d505      	bpl.n	8000f9c <main+0xf4>
			  velStage++;
 8000f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f92:	3301      	adds	r3, #1
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
			  timer=0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	65fb      	str	r3, [r7, #92]	; 0x5c
		      break;
 8000f9a:	e064      	b.n	8001066 <main+0x1be>
		  }

	    case 1:
		  curX = MeasureDistance(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f000 fa77 	bl	8001490 <MeasureDistance>
 8000fa2:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		  curY = MeasureDistance(2);
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f000 fa72 	bl	8001490 <MeasureDistance>
 8000fac:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
		  break;
 8000fb0:	e059      	b.n	8001066 <main+0x1be>

	    case 2:
	    	deltaX=trigMeasurement(preX, curX, preY, curY); //dX
 8000fb2:	edd7 1a1a 	vldr	s3, [r7, #104]	; 0x68
 8000fb6:	ed97 1a1b 	vldr	s2, [r7, #108]	; 0x6c
 8000fba:	edd7 0a1c 	vldr	s1, [r7, #112]	; 0x70
 8000fbe:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8000fc2:	f000 fb41 	bl	8001648 <trigMeasurement>
 8000fc6:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	    	curX=preX;
 8000fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fcc:	673b      	str	r3, [r7, #112]	; 0x70
	    	curY=preY;
 8000fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fd0:	66bb      	str	r3, [r7, #104]	; 0x68
	    	velStage++;
 8000fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	663b      	str	r3, [r7, #96]	; 0x60
	    	break;
 8000fd8:	e045      	b.n	8001066 <main+0x1be>

	    case 3: // add instant x to array
			xArray[index] = deltaX; // dX
 8000fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	3378      	adds	r3, #120	; 0x78
 8000fe0:	443b      	add	r3, r7
 8000fe2:	3b54      	subs	r3, #84	; 0x54
 8000fe4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000fe6:	601a      	str	r2, [r3, #0]
			index++;
 8000fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fea:	3301      	adds	r3, #1
 8000fec:	65bb      	str	r3, [r7, #88]	; 0x58
			velStage=0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	663b      	str	r3, [r7, #96]	; 0x60

			if (index==10){
 8000ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ff4:	2b0a      	cmp	r3, #10
 8000ff6:	d104      	bne.n	8001002 <main+0x15a>
				velStage=4;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	663b      	str	r3, [r7, #96]	; 0x60
				index=0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	65bb      	str	r3, [r7, #88]	; 0x58
				break;
 8001000:	e031      	b.n	8001066 <main+0x1be>
			}

	    case 4: // add vel to the array
	    	velArray[index]= (xArray[index+1]-xArray[index])/(interval);// calculate dV; derivative
 8001002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001004:	3301      	adds	r3, #1
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	3378      	adds	r3, #120	; 0x78
 800100a:	443b      	add	r3, r7
 800100c:	3b54      	subs	r3, #84	; 0x54
 800100e:	ed93 7a00 	vldr	s14, [r3]
 8001012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	3378      	adds	r3, #120	; 0x78
 8001018:	443b      	add	r3, r7
 800101a:	3b54      	subs	r3, #84	; 0x54
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001024:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	3378      	adds	r3, #120	; 0x78
 8001032:	443b      	add	r3, r7
 8001034:	3b78      	subs	r3, #120	; 0x78
 8001036:	edc3 7a00 	vstr	s15, [r3]
	    	index++;
 800103a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800103c:	3301      	adds	r3, #1
 800103e:	65bb      	str	r3, [r7, #88]	; 0x58

	    	if (index==9){
 8001040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001042:	2b09      	cmp	r3, #9
 8001044:	d105      	bne.n	8001052 <main+0x1aa>
	    		velStage++;
 8001046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001048:	3301      	adds	r3, #1
 800104a:	663b      	str	r3, [r7, #96]	; 0x60
	    		index=0;
 800104c:	2300      	movs	r3, #0
 800104e:	65bb      	str	r3, [r7, #88]	; 0x58
	    		break;
 8001050:	e009      	b.n	8001066 <main+0x1be>
	    	}


	    case 5:
	    	aveVel = AveVel(velArray);
 8001052:	463b      	mov	r3, r7
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fbbd 	bl	80017d4 <AveVel>
 800105a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	    	velStage++;
 800105e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001060:	3301      	adds	r3, #1
 8001062:	663b      	str	r3, [r7, #96]	; 0x60
	    	break;
 8001064:	bf00      	nop
	  }



	  switch(lightStage) {
 8001066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001068:	2b00      	cmp	r3, #0
 800106a:	f47f af64 	bne.w	8000f36 <main+0x8e>
	    case 0:
	      preX = MeasureDistance(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f000 fa0e 	bl	8001490 <MeasureDistance>
 8001074:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		  preY = MeasureDistance(2);
 8001078:	2002      	movs	r0, #2
 800107a:	f000 fa09 	bl	8001490 <MeasureDistance>
 800107e:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
		  if (timer>interval){ // every 0.01 seconds;
 8001082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d503      	bpl.n	80010a2 <main+0x1fa>
			  velStage++;
 800109a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800109c:	3301      	adds	r3, #1
 800109e:	663b      	str	r3, [r7, #96]	; 0x60
		      break;
 80010a0:	bf00      	nop
	  timer++;
 80010a2:	e748      	b.n	8000f36 <main+0x8e>
 80010a4:	f3af 8000 	nop.w
 80010a8:	47ae147b 	.word	0x47ae147b
 80010ac:	3f847ae1 	.word	0x3f847ae1
 80010b0:	00401640 	.word	0x00401640

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	; 0x50
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2230      	movs	r2, #48	; 0x30
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fa02 	bl	80034cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <SystemClock_Config+0xcc>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a27      	ldr	r2, [pc, #156]	; (8001180 <SystemClock_Config+0xcc>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <SystemClock_Config+0xcc>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <SystemClock_Config+0xd0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001100:	4a20      	ldr	r2, [pc, #128]	; (8001184 <SystemClock_Config+0xd0>)
 8001102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <SystemClock_Config+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001114:	2302      	movs	r3, #2
 8001116:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	2301      	movs	r3, #1
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111c:	2310      	movs	r3, #16
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001120:	2302      	movs	r3, #2
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001124:	2300      	movs	r3, #0
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001128:	2308      	movs	r3, #8
 800112a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800112c:	2354      	movs	r3, #84	; 0x54
 800112e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001130:	2302      	movs	r3, #2
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001134:	2307      	movs	r3, #7
 8001136:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4618      	mov	r0, r3
 800113e:	f000 ffa3 	bl	8002088 <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001148:	f000 fb7c 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001150:	2302      	movs	r3, #2
 8001152:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	2102      	movs	r1, #2
 8001168:	4618      	mov	r0, r3
 800116a:	f001 fa05 	bl	8002578 <HAL_RCC_ClockConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001174:	f000 fb66 	bl	8001844 <Error_Handler>
  }
}
 8001178:	bf00      	nop
 800117a:	3750      	adds	r7, #80	; 0x50
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <MX_TIM1_Init+0x98>)
 80011a6:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <MX_TIM1_Init+0x9c>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <MX_TIM1_Init+0x98>)
 80011ac:	2247      	movs	r2, #71	; 0x47
 80011ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_TIM1_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_TIM1_Init+0x98>)
 80011b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_TIM1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_TIM1_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_TIM1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <MX_TIM1_Init+0x98>)
 80011d2:	f001 fbf1 	bl	80029b8 <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011dc:	f000 fb32 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4619      	mov	r1, r3
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <MX_TIM1_Init+0x98>)
 80011ee:	f001 fc32 	bl	8002a56 <HAL_TIM_ConfigClockSource>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80011f8:	f000 fb24 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_TIM1_Init+0x98>)
 800120a:	f001 fe05 	bl	8002e18 <HAL_TIMEx_MasterConfigSynchronization>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001214:	f000 fb16 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000008c 	.word	0x2000008c
 8001224:	40010000 	.word	0x40010000

08001228 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001244:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_TIM4_Init+0x90>)
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <MX_TIM4_Init+0x94>)
 8001248:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_TIM4_Init+0x90>)
 800124c:	2253      	movs	r2, #83	; 0x53
 800124e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_TIM4_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_TIM4_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_TIM4_Init+0x90>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_TIM4_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_TIM4_Init+0x90>)
 800126a:	f001 fba5 	bl	80029b8 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001274:	f000 fae6 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM4_Init+0x90>)
 8001286:	f001 fbe6 	bl	8002a56 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001290:	f000 fad8 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800129c:	463b      	mov	r3, r7
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM4_Init+0x90>)
 80012a2:	f001 fdb9 	bl	8002e18 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80012ac:	f000 faca 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200000d4 	.word	0x200000d4
 80012bc:	40000800 	.word	0x40000800

080012c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_USART2_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012f8:	f001 fdfc 	bl	8002ef4 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 fa9f 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000011c 	.word	0x2000011c
 8001310:	40004400 	.word	0x40004400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <MX_GPIO_Init+0x108>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a3a      	ldr	r2, [pc, #232]	; (800141c <MX_GPIO_Init+0x108>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b38      	ldr	r3, [pc, #224]	; (800141c <MX_GPIO_Init+0x108>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <MX_GPIO_Init+0x108>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a33      	ldr	r2, [pc, #204]	; (800141c <MX_GPIO_Init+0x108>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <MX_GPIO_Init+0x108>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_GPIO_Init+0x108>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a2c      	ldr	r2, [pc, #176]	; (800141c <MX_GPIO_Init+0x108>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_GPIO_Init+0x108>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|ECHO2_Pin|TRIG1_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001384:	4826      	ldr	r0, [pc, #152]	; (8001420 <MX_GPIO_Init+0x10c>)
 8001386:	f000 fe65 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001390:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	4619      	mov	r1, r3
 80013a0:	4820      	ldr	r0, [pc, #128]	; (8001424 <MX_GPIO_Init+0x110>)
 80013a2:	f000 fcbb 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin ECHO2_Pin TRIG1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|ECHO2_Pin|TRIG1_Pin;
 80013a6:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80013aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	4619      	mov	r1, r3
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <MX_GPIO_Init+0x10c>)
 80013c0:	f000 fcac 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG2_Pin */
  GPIO_InitStruct.Pin = TRIG2_Pin;
 80013c4:	2340      	movs	r3, #64	; 0x40
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TRIG2_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	4812      	ldr	r0, [pc, #72]	; (8001420 <MX_GPIO_Init+0x10c>)
 80013d8:	f000 fca0 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO2C9_Pin */
  GPIO_InitStruct.Pin = ECHO2C9_Pin;
 80013dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ECHO2C9_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_GPIO_Init+0x110>)
 80013f2:	f000 fc93 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80013f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4619      	mov	r1, r3
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_GPIO_Init+0x10c>)
 800140e:	f000 fc85 	bl	8001d1c <HAL_GPIO_Init>

}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020800 	.word	0x40020800

08001428 <usDelay>:

/* USER CODE BEGIN 4 */

void usDelay(uint32_t uSec)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d801      	bhi.n	800143a <usDelay+0x12>
 8001436:	2302      	movs	r3, #2
 8001438:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <usDelay+0x60>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <usDelay+0x60>)
 8001444:	2201      	movs	r2, #1
 8001446:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <usDelay+0x60>)
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <usDelay+0x60>)
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <usDelay+0x60>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <usDelay+0x60>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8001460:	bf00      	nop
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <usDelay+0x60>)
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b01      	cmp	r3, #1
 800146c:	d1f9      	bne.n	8001462 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <usDelay+0x60>)
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <usDelay+0x60>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6113      	str	r3, [r2, #16]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40000800 	.word	0x40000800
 800148c:	00000000 	.word	0x00000000

08001490 <MeasureDistance>:
// GPIO_PIN_9 Echo for sensor 1:

// SensorID =2;
// GPIO_PIN_6 Trig for sensor 2
// GPIO_PIN_7 Echo for sensor 2:
float MeasureDistance(int sensorID){
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	float localDistance=0;
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
	if (sensorID == 1){
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d15f      	bne.n	8001564 <MeasureDistance+0xd4>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014aa:	4863      	ldr	r0, [pc, #396]	; (8001638 <MeasureDistance+0x1a8>)
 80014ac:	f000 fdd2 	bl	8002054 <HAL_GPIO_WritePin>
		usDelay(3);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f7ff ffb9 	bl	8001428 <usDelay>

		//*** START Ultrasonic measure routine ***//
		//1. Output 10 usec TRIG
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014bc:	485e      	ldr	r0, [pc, #376]	; (8001638 <MeasureDistance+0x1a8>)
 80014be:	f000 fdc9 	bl	8002054 <HAL_GPIO_WritePin>
		usDelay(10);
 80014c2:	200a      	movs	r0, #10
 80014c4:	f7ff ffb0 	bl	8001428 <usDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ce:	485a      	ldr	r0, [pc, #360]	; (8001638 <MeasureDistance+0x1a8>)
 80014d0:	f000 fdc0 	bl	8002054 <HAL_GPIO_WritePin>

		//2. Wait for ECHO pin rising edge
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET);
 80014d4:	bf00      	nop
 80014d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014da:	4857      	ldr	r0, [pc, #348]	; (8001638 <MeasureDistance+0x1a8>)
 80014dc:	f000 fda2 	bl	8002024 <HAL_GPIO_ReadPin>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f7      	beq.n	80014d6 <MeasureDistance+0x46>

		//3. Start measuring ECHO pulse width in usec
		numTicks = 0;
 80014e6:	4b55      	ldr	r3, [pc, #340]	; (800163c <MeasureDistance+0x1ac>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 80014ec:	e007      	b.n	80014fe <MeasureDistance+0x6e>
		{
			numTicks++;
 80014ee:	4b53      	ldr	r3, [pc, #332]	; (800163c <MeasureDistance+0x1ac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	4a51      	ldr	r2, [pc, #324]	; (800163c <MeasureDistance+0x1ac>)
 80014f6:	6013      	str	r3, [r2, #0]
			usDelay(2); //2.8usec
 80014f8:	2002      	movs	r0, #2
 80014fa:	f7ff ff95 	bl	8001428 <usDelay>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET)
 80014fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001502:	484d      	ldr	r0, [pc, #308]	; (8001638 <MeasureDistance+0x1a8>)
 8001504:	f000 fd8e 	bl	8002024 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	2b01      	cmp	r3, #1
 800150c:	d0ef      	beq.n	80014ee <MeasureDistance+0x5e>
		};


		localDistance = (numTicks + 0.0f)*2.8*speedOfSound; // Speed of sound is already divided by 2 here.
 800150e:	4b4b      	ldr	r3, [pc, #300]	; (800163c <MeasureDistance+0x1ac>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800151a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001640 <MeasureDistance+0x1b0>
 800151e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001522:	ee17 0a90 	vmov	r0, s15
 8001526:	f7fe ffbb 	bl	80004a0 <__aeabi_f2d>
 800152a:	a341      	add	r3, pc, #260	; (adr r3, 8001630 <MeasureDistance+0x1a0>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f80e 	bl	8000550 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4614      	mov	r4, r2
 800153a:	461d      	mov	r5, r3
 800153c:	4b41      	ldr	r3, [pc, #260]	; (8001644 <MeasureDistance+0x1b4>)
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ffae 	bl	80004a0 <__aeabi_f2d>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7ff f800 	bl	8000550 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fad2 	bl	8000b00 <__aeabi_d2f>
 800155c:	4603      	mov	r3, r0
 800155e:	60fb      	str	r3, [r7, #12]


		return localDistance;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	e05e      	b.n	8001622 <MeasureDistance+0x192>
	}

	if (sensorID == 2){
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d15a      	bne.n	8001620 <MeasureDistance+0x190>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2140      	movs	r1, #64	; 0x40
 800156e:	4832      	ldr	r0, [pc, #200]	; (8001638 <MeasureDistance+0x1a8>)
 8001570:	f000 fd70 	bl	8002054 <HAL_GPIO_WritePin>
		usDelay(3);
 8001574:	2003      	movs	r0, #3
 8001576:	f7ff ff57 	bl	8001428 <usDelay>

		//*** START Ultrasonic measure routine ***//
		//1. Output 10 usec TRIG
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	482e      	ldr	r0, [pc, #184]	; (8001638 <MeasureDistance+0x1a8>)
 8001580:	f000 fd68 	bl	8002054 <HAL_GPIO_WritePin>
		usDelay(10);
 8001584:	200a      	movs	r0, #10
 8001586:	f7ff ff4f 	bl	8001428 <usDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	482a      	ldr	r0, [pc, #168]	; (8001638 <MeasureDistance+0x1a8>)
 8001590:	f000 fd60 	bl	8002054 <HAL_GPIO_WritePin>

		//2. Wait for ECHO pin rising edge
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET);
 8001594:	bf00      	nop
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4827      	ldr	r0, [pc, #156]	; (8001638 <MeasureDistance+0x1a8>)
 800159a:	f000 fd43 	bl	8002024 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f8      	beq.n	8001596 <MeasureDistance+0x106>

		//3. Start measuring ECHO pulse width in usec
		numTicks = 0;
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <MeasureDistance+0x1ac>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET)
 80015aa:	e007      	b.n	80015bc <MeasureDistance+0x12c>
		{
			numTicks++;
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <MeasureDistance+0x1ac>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	4a22      	ldr	r2, [pc, #136]	; (800163c <MeasureDistance+0x1ac>)
 80015b4:	6013      	str	r3, [r2, #0]
			usDelay(2); //2.8usec
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7ff ff36 	bl	8001428 <usDelay>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	481e      	ldr	r0, [pc, #120]	; (8001638 <MeasureDistance+0x1a8>)
 80015c0:	f000 fd30 	bl	8002024 <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d0f0      	beq.n	80015ac <MeasureDistance+0x11c>
		};


		localDistance = (numTicks + 0.0f)*2.8*speedOfSound; // Speed of sound is already divided by 2 here.
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MeasureDistance+0x1ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001640 <MeasureDistance+0x1b0>
 80015da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015de:	ee17 0a90 	vmov	r0, s15
 80015e2:	f7fe ff5d 	bl	80004a0 <__aeabi_f2d>
 80015e6:	a312      	add	r3, pc, #72	; (adr r3, 8001630 <MeasureDistance+0x1a0>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7fe ffb0 	bl	8000550 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4614      	mov	r4, r2
 80015f6:	461d      	mov	r5, r3
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MeasureDistance+0x1b4>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff50 	bl	80004a0 <__aeabi_f2d>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7fe ffa2 	bl	8000550 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fa74 	bl	8000b00 <__aeabi_d2f>
 8001618:	4603      	mov	r3, r0
 800161a:	60fb      	str	r3, [r7, #12]


		return localDistance;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	e000      	b.n	8001622 <MeasureDistance+0x192>
	if(localDistance > 20){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		HAL_Delay(3000);
	}
	*/
	return localDistance;
 8001620:	68fb      	ldr	r3, [r7, #12]

}
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bdb0      	pop	{r4, r5, r7, pc}
 8001630:	66666666 	.word	0x66666666
 8001634:	40066666 	.word	0x40066666
 8001638:	40020000 	.word	0x40020000
 800163c:	20000160 	.word	0x20000160
 8001640:	00000000 	.word	0x00000000
 8001644:	3c8c7e28 	.word	0x3c8c7e28

08001648 <trigMeasurement>:
// Do we need to calculate both at the same time or split into two function calls?
// int counter=0;



float trigMeasurement(float preX, float curX, float preY, float curY){
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0
 800164e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001652:	edc7 0a02 	vstr	s1, [r7, #8]
 8001656:	ed87 1a01 	vstr	s2, [r7, #4]
 800165a:	edc7 1a00 	vstr	s3, [r7]
	// k is the distance between two sensors pair
	//+++++++++++++++++++++++++++++++++++++++++++++
	float local_deltaX=0;
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
	float preDistance=0;
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
	float curDistance=0;
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
	float preData=0;
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
	float curData=0;
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
	float delta1=0;
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
	float delta2=0;
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	617b      	str	r3, [r7, #20]


	preData = -((preX*preX)-(preY*preY)-(k*k))/(preY*k);
 8001688:	edd7 7a03 	vldr	s15, [r7, #12]
 800168c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001690:	edd7 7a01 	vldr	s15, [r7, #4]
 8001694:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001698:	ee37 7a67 	vsub.f32	s14, s14, s15
 800169c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80016a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	eef1 6a67 	vneg.f32	s13, s15
 80016b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c0:	edc7 7a08 	vstr	s15, [r7, #32]
	delta1 = acos(preData);
 80016c4:	6a38      	ldr	r0, [r7, #32]
 80016c6:	f7fe feeb 	bl	80004a0 <__aeabi_f2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	ec43 2b10 	vmov	d0, r2, r3
 80016d2:	f001 ff59 	bl	8003588 <acos>
 80016d6:	ec53 2b10 	vmov	r2, r3, d0
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa0f 	bl	8000b00 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	61bb      	str	r3, [r7, #24]
	preDistance = preY*cos(delta1);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe feda 	bl	80004a0 <__aeabi_f2d>
 80016ec:	4604      	mov	r4, r0
 80016ee:	460d      	mov	r5, r1
 80016f0:	69b8      	ldr	r0, [r7, #24]
 80016f2:	f7fe fed5 	bl	80004a0 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	ec43 2b10 	vmov	d0, r2, r3
 80016fe:	f001 feef 	bl	80034e0 <cos>
 8001702:	ec53 2b10 	vmov	r2, r3, d0
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7fe ff21 	bl	8000550 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff f9f3 	bl	8000b00 <__aeabi_d2f>
 800171a:	4603      	mov	r3, r0
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28


	curData = -((curX*curX)-(curY*curY)-(k*k))/(curY*k);
 800171e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001722:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001726:	edd7 7a00 	vldr	s15, [r7]
 800172a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800172e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001736:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800173a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001742:	eef1 6a67 	vneg.f32	s13, s15
 8001746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800174a:	edd7 7a00 	vldr	s15, [r7]
 800174e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001756:	edc7 7a07 	vstr	s15, [r7, #28]
	delta2 = acos(curData);
 800175a:	69f8      	ldr	r0, [r7, #28]
 800175c:	f7fe fea0 	bl	80004a0 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	ec43 2b10 	vmov	d0, r2, r3
 8001768:	f001 ff0e 	bl	8003588 <acos>
 800176c:	ec53 2b10 	vmov	r2, r3, d0
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f9c4 	bl	8000b00 <__aeabi_d2f>
 8001778:	4603      	mov	r3, r0
 800177a:	617b      	str	r3, [r7, #20]
	curDistance = curY*cos(delta2);
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f7fe fe8f 	bl	80004a0 <__aeabi_f2d>
 8001782:	4604      	mov	r4, r0
 8001784:	460d      	mov	r5, r1
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7fe fe8a 	bl	80004a0 <__aeabi_f2d>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	ec43 2b10 	vmov	d0, r2, r3
 8001794:	f001 fea4 	bl	80034e0 <cos>
 8001798:	ec53 2b10 	vmov	r2, r3, d0
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fed6 	bl	8000550 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9a8 	bl	8000b00 <__aeabi_d2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24

	// calculate delta x
	local_deltaX = curDistance - preDistance;
 80017b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	return local_deltaX;
 80017c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c6:	ee07 3a90 	vmov	s15, r3

}
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	3730      	adds	r7, #48	; 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bdb0      	pop	{r4, r5, r7, pc}

080017d4 <AveVel>:




// this function will calculate the average velocity of an object over an interval
float AveVel(float velArray[]){ // size 9
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

	float sum=0;
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
	float aveVel=0;
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<9;i++){
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e00e      	b.n	800180c <AveVel+0x38>
		sum += velArray[i];
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80017fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001802:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i=0; i<9;i++){
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	3301      	adds	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b08      	cmp	r3, #8
 8001810:	dded      	ble.n	80017ee <AveVel+0x1a>
	}

	aveVel = sum/(interval*10); // mean value
 8001812:	2200      	movs	r2, #0
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001824:	edd7 6a05 	vldr	s13, [r7, #20]
 8001828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182c:	edc7 7a03 	vstr	s15, [r7, #12]
	return aveVel;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	ee07 3a90 	vmov	s15, r3


	//+++++++++++++++++++++++++++++++++++++++++++++
	// Problem is that first time some entries are still at their default values
	// float velArray[i]=(xArray[i+1]-xArray[i])/interval; // this is the idea of derivative where lim(f(x+h)-f(x))/h as h which is our interval approaches 0
}
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_MspInit+0x4c>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_MspInit+0x4c>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_MspInit+0x4c>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_MspInit+0x4c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800188e:	2007      	movs	r0, #7
 8001890:	f000 fa10 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a15      	ldr	r2, [pc, #84]	; (8001904 <HAL_TIM_Base_MspInit+0x64>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d10e      	bne.n	80018d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_TIM_Base_MspInit+0x68>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <HAL_TIM_Base_MspInit+0x68>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_TIM_Base_MspInit+0x68>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018ce:	e012      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <HAL_TIM_Base_MspInit+0x6c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10d      	bne.n	80018f6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_TIM_Base_MspInit+0x68>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_TIM_Base_MspInit+0x68>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_TIM_Base_MspInit+0x68>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40010000 	.word	0x40010000
 8001908:	40023800 	.word	0x40023800
 800190c:	40000800 	.word	0x40000800

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_UART_MspInit+0x84>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12b      	bne.n	800198a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_UART_MspInit+0x88>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_UART_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800196a:	230c      	movs	r3, #12
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197a:	2307      	movs	r3, #7
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_UART_MspInit+0x8c>)
 8001986:	f000 f9c9 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40004400 	.word	0x40004400
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 f890 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a1e:	490e      	ldr	r1, [pc, #56]	; (8001a58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a34:	4c0b      	ldr	r4, [pc, #44]	; (8001a64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a42:	f7ff ffd7 	bl	80019f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f001 fd1d 	bl	8003484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4a:	f7ff fa2d 	bl	8000ea8 <main>
  bx  lr    
 8001a4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a5c:	08004e30 	.word	0x08004e30
  ldr r2, =_sbss
 8001a60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a64:	20000168 	.word	0x20000168

08001a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_Init+0x40>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_Init+0x40>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x40>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f90d 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f808 	bl	8001ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fed6 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x54>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_InitTick+0x58>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f917 	bl	8001d02 <HAL_SYSTICK_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00e      	b.n	8001afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d80a      	bhi.n	8001afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aec:	f000 f8ed 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <HAL_InitTick+0x5c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000164 	.word	0x20000164

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000164 	.word	0x20000164

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c94:	f7ff ff8e 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff47 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff5c 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff8e 	bl	8001c08 <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffb0 	bl	8001c70 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e159      	b.n	8001fec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8148 	bne.w	8001fe6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a2 	beq.w	8001fe6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b57      	ldr	r3, [pc, #348]	; (8002004 <HAL_GPIO_Init+0x2e8>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a56      	ldr	r2, [pc, #344]	; (8002004 <HAL_GPIO_Init+0x2e8>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b54      	ldr	r3, [pc, #336]	; (8002004 <HAL_GPIO_Init+0x2e8>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ebe:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_GPIO_Init+0x2ec>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a49      	ldr	r2, [pc, #292]	; (800200c <HAL_GPIO_Init+0x2f0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d019      	beq.n	8001f1e <HAL_GPIO_Init+0x202>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a48      	ldr	r2, [pc, #288]	; (8002010 <HAL_GPIO_Init+0x2f4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x1fe>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a47      	ldr	r2, [pc, #284]	; (8002014 <HAL_GPIO_Init+0x2f8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <HAL_GPIO_Init+0x1fa>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a46      	ldr	r2, [pc, #280]	; (8002018 <HAL_GPIO_Init+0x2fc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <HAL_GPIO_Init+0x1f6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a45      	ldr	r2, [pc, #276]	; (800201c <HAL_GPIO_Init+0x300>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_GPIO_Init+0x1f2>
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	e008      	b.n	8001f20 <HAL_GPIO_Init+0x204>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x204>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e004      	b.n	8001f20 <HAL_GPIO_Init+0x204>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_Init+0x204>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x204>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f30:	4935      	ldr	r1, [pc, #212]	; (8002008 <HAL_GPIO_Init+0x2ec>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f62:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f8c:	4a24      	ldr	r2, [pc, #144]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f92:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	f67f aea2 	bls.w	8001d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40013800 	.word	0x40013800
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40021000 	.word	0x40021000
 8002020:	40013c00 	.word	0x40013c00

08002024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002070:	e003      	b.n	800207a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e267      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d075      	beq.n	8002192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020a6:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d00c      	beq.n	80020cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b2:	4b85      	ldr	r3, [pc, #532]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d112      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020be:	4b82      	ldr	r3, [pc, #520]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ca:	d10b      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d05b      	beq.n	8002190 <HAL_RCC_OscConfig+0x108>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d157      	bne.n	8002190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e242      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d106      	bne.n	80020fc <HAL_RCC_OscConfig+0x74>
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a75      	ldr	r2, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0xb0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x98>
 8002106:	4b70      	ldr	r3, [pc, #448]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6f      	ldr	r2, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6c      	ldr	r2, [pc, #432]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0xb0>
 8002120:	4b69      	ldr	r3, [pc, #420]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a68      	ldr	r2, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fcfa 	bl	8001b38 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fcf6 	bl	8001b38 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e207      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0xc0>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fce6 	bl	8001b38 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fce2 	bl	8001b38 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1f3      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0xe8>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d063      	beq.n	8002266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d11c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b6:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x152>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1c7      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4937      	ldr	r1, [pc, #220]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	e03a      	b.n	8002266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_OscConfig+0x244>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7ff fc9b 	bl	8001b38 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff fc97 	bl	8001b38 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1a8      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4925      	ldr	r1, [pc, #148]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_OscConfig+0x244>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff fc7a 	bl	8001b38 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002248:	f7ff fc76 	bl	8001b38 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e187      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d036      	beq.n	80022e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_RCC_OscConfig+0x248>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7ff fc5a 	bl	8001b38 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002288:	f7ff fc56 	bl	8001b38 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e167      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x240>)
 800229c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x200>
 80022a6:	e01b      	b.n	80022e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_RCC_OscConfig+0x248>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7ff fc43 	bl	8001b38 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	e00e      	b.n	80022d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b6:	f7ff fc3f 	bl	8001b38 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d907      	bls.n	80022d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e150      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
 80022c8:	40023800 	.word	0x40023800
 80022cc:	42470000 	.word	0x42470000
 80022d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	4b88      	ldr	r3, [pc, #544]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80022d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ea      	bne.n	80022b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 8097 	beq.w	800241c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4b81      	ldr	r3, [pc, #516]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b7d      	ldr	r3, [pc, #500]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a7c      	ldr	r2, [pc, #496]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b7a      	ldr	r3, [pc, #488]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231e:	4b77      	ldr	r3, [pc, #476]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d118      	bne.n	800235c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232a:	4b74      	ldr	r3, [pc, #464]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a73      	ldr	r2, [pc, #460]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002336:	f7ff fbff 	bl	8001b38 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7ff fbfb 	bl	8001b38 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e10c      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x474>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x2ea>
 8002364:	4b64      	ldr	r3, [pc, #400]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a63      	ldr	r2, [pc, #396]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	e01c      	b.n	80023ac <HAL_RCC_OscConfig+0x324>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b05      	cmp	r3, #5
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x30c>
 800237a:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	4a5e      	ldr	r2, [pc, #376]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	4a5b      	ldr	r2, [pc, #364]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6713      	str	r3, [r2, #112]	; 0x70
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0x324>
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	4a54      	ldr	r2, [pc, #336]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80023a6:	f023 0304 	bic.w	r3, r3, #4
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7ff fbc0 	bl	8001b38 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023bc:	f7ff fbbc 	bl	8001b38 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0cb      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0ee      	beq.n	80023bc <HAL_RCC_OscConfig+0x334>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7ff fbaa 	bl	8001b38 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7ff fba6 	bl	8001b38 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e0b5      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1ee      	bne.n	80023e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002410:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	4a38      	ldr	r2, [pc, #224]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a1 	beq.w	8002568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002426:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b08      	cmp	r3, #8
 8002430:	d05c      	beq.n	80024ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d141      	bne.n	80024be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff fb7a 	bl	8001b38 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002448:	f7ff fb76 	bl	8001b38 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e087      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	019b      	lsls	r3, r3, #6
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	3b01      	subs	r3, #1
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	491b      	ldr	r1, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7ff fb4f 	bl	8001b38 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249e:	f7ff fb4b 	bl	8001b38 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e05c      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x416>
 80024bc:	e054      	b.n	8002568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_RCC_OscConfig+0x478>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff fb38 	bl	8001b38 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024cc:	f7ff fb34 	bl	8001b38 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e045      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_RCC_OscConfig+0x470>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x444>
 80024ea:	e03d      	b.n	8002568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e038      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000
 8002500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x4ec>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d028      	beq.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d121      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d11a      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002534:	4013      	ands	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800253a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800253c:	4293      	cmp	r3, r2
 800253e:	d111      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	3b01      	subs	r3, #1
 800254e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d107      	bne.n	8002564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0cc      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d90c      	bls.n	80025b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b65      	ldr	r3, [pc, #404]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b63      	ldr	r3, [pc, #396]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0b8      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025cc:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a52      	ldr	r2, [pc, #328]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f0:	4b50      	ldr	r3, [pc, #320]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	494d      	ldr	r1, [pc, #308]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d044      	beq.n	8002698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d107      	bne.n	8002626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b47      	ldr	r3, [pc, #284]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d119      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e07f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d003      	beq.n	8002636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002632:	2b03      	cmp	r3, #3
 8002634:	d107      	bne.n	8002646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002636:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e067      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f023 0203 	bic.w	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4934      	ldr	r1, [pc, #208]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	4313      	orrs	r3, r2
 8002666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002668:	f7ff fa66 	bl	8001b38 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	e00a      	b.n	8002686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002670:	f7ff fa62 	bl	8001b38 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e04f      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 020c 	and.w	r2, r3, #12
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	429a      	cmp	r2, r3
 8002696:	d1eb      	bne.n	8002670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002698:	4b25      	ldr	r3, [pc, #148]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d20c      	bcs.n	80026c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e032      	b.n	8002726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4916      	ldr	r1, [pc, #88]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	490e      	ldr	r1, [pc, #56]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026fe:	f000 f821 	bl	8002744 <HAL_RCC_GetSysClockFreq>
 8002702:	4602      	mov	r2, r0
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	5ccb      	ldrb	r3, [r1, r3]
 8002712:	fa22 f303 	lsr.w	r3, r2, r3
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff f9c6 	bl	8001ab0 <HAL_InitTick>

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023c00 	.word	0x40023c00
 8002734:	40023800 	.word	0x40023800
 8002738:	08004c28 	.word	0x08004c28
 800273c:	20000000 	.word	0x20000000
 8002740:	20000004 	.word	0x20000004

08002744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002748:	b094      	sub	sp, #80	; 0x50
 800274a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	647b      	str	r3, [r7, #68]	; 0x44
 8002750:	2300      	movs	r3, #0
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002754:	2300      	movs	r3, #0
 8002756:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800275c:	4b79      	ldr	r3, [pc, #484]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b08      	cmp	r3, #8
 8002766:	d00d      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x40>
 8002768:	2b08      	cmp	r3, #8
 800276a:	f200 80e1 	bhi.w	8002930 <HAL_RCC_GetSysClockFreq+0x1ec>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x34>
 8002772:	2b04      	cmp	r3, #4
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0x3a>
 8002776:	e0db      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_RCC_GetSysClockFreq+0x204>)
 800277a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800277c:	e0db      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800277e:	4b73      	ldr	r3, [pc, #460]	; (800294c <HAL_RCC_GetSysClockFreq+0x208>)
 8002780:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002782:	e0d8      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800278c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	099b      	lsrs	r3, r3, #6
 80027a0:	2200      	movs	r2, #0
 80027a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
 80027ae:	2300      	movs	r3, #0
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
 80027b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027b6:	4622      	mov	r2, r4
 80027b8:	462b      	mov	r3, r5
 80027ba:	f04f 0000 	mov.w	r0, #0
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	0159      	lsls	r1, r3, #5
 80027c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c8:	0150      	lsls	r0, r2, #5
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4621      	mov	r1, r4
 80027d0:	1a51      	subs	r1, r2, r1
 80027d2:	6139      	str	r1, [r7, #16]
 80027d4:	4629      	mov	r1, r5
 80027d6:	eb63 0301 	sbc.w	r3, r3, r1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027e8:	4659      	mov	r1, fp
 80027ea:	018b      	lsls	r3, r1, #6
 80027ec:	4651      	mov	r1, sl
 80027ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027f2:	4651      	mov	r1, sl
 80027f4:	018a      	lsls	r2, r1, #6
 80027f6:	4651      	mov	r1, sl
 80027f8:	ebb2 0801 	subs.w	r8, r2, r1
 80027fc:	4659      	mov	r1, fp
 80027fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002816:	4690      	mov	r8, r2
 8002818:	4699      	mov	r9, r3
 800281a:	4623      	mov	r3, r4
 800281c:	eb18 0303 	adds.w	r3, r8, r3
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	462b      	mov	r3, r5
 8002824:	eb49 0303 	adc.w	r3, r9, r3
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002836:	4629      	mov	r1, r5
 8002838:	024b      	lsls	r3, r1, #9
 800283a:	4621      	mov	r1, r4
 800283c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002840:	4621      	mov	r1, r4
 8002842:	024a      	lsls	r2, r1, #9
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284a:	2200      	movs	r2, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
 800284e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002854:	f7fe f9a4 	bl	8000ba0 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002860:	e058      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	2200      	movs	r2, #0
 800286a:	4618      	mov	r0, r3
 800286c:	4611      	mov	r1, r2
 800286e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002872:	623b      	str	r3, [r7, #32]
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
 8002878:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800287c:	4642      	mov	r2, r8
 800287e:	464b      	mov	r3, r9
 8002880:	f04f 0000 	mov.w	r0, #0
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	0159      	lsls	r1, r3, #5
 800288a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288e:	0150      	lsls	r0, r2, #5
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4641      	mov	r1, r8
 8002896:	ebb2 0a01 	subs.w	sl, r2, r1
 800289a:	4649      	mov	r1, r9
 800289c:	eb63 0b01 	sbc.w	fp, r3, r1
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028b4:	ebb2 040a 	subs.w	r4, r2, sl
 80028b8:	eb63 050b 	sbc.w	r5, r3, fp
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	00eb      	lsls	r3, r5, #3
 80028c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ca:	00e2      	lsls	r2, r4, #3
 80028cc:	4614      	mov	r4, r2
 80028ce:	461d      	mov	r5, r3
 80028d0:	4643      	mov	r3, r8
 80028d2:	18e3      	adds	r3, r4, r3
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	464b      	mov	r3, r9
 80028d8:	eb45 0303 	adc.w	r3, r5, r3
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ea:	4629      	mov	r1, r5
 80028ec:	028b      	lsls	r3, r1, #10
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f4:	4621      	mov	r1, r4
 80028f6:	028a      	lsls	r2, r1, #10
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fe:	2200      	movs	r2, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	61fa      	str	r2, [r7, #28]
 8002904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002908:	f7fe f94a 	bl	8000ba0 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4613      	mov	r3, r2
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_GetSysClockFreq+0x200>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002924:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800292e:	e002      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetSysClockFreq+0x204>)
 8002932:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002938:	4618      	mov	r0, r3
 800293a:	3750      	adds	r7, #80	; 0x50
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	00f42400 	.word	0x00f42400
 800294c:	007a1200 	.word	0x007a1200

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_RCC_GetHCLKFreq+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800296c:	f7ff fff0 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0a9b      	lsrs	r3, r3, #10
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	08004c38 	.word	0x08004c38

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002994:	f7ff ffdc 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0b5b      	lsrs	r3, r3, #13
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	08004c38 	.word	0x08004c38

080029b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e041      	b.n	8002a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe ff5e 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f000 f8f4 	bl	8002be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_TIM_ConfigClockSource+0x1c>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e0b4      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x186>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a98:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aaa:	d03e      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0xd4>
 8002aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab0:	f200 8087 	bhi.w	8002bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab8:	f000 8086 	beq.w	8002bc8 <HAL_TIM_ConfigClockSource+0x172>
 8002abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac0:	d87f      	bhi.n	8002bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac2:	2b70      	cmp	r3, #112	; 0x70
 8002ac4:	d01a      	beq.n	8002afc <HAL_TIM_ConfigClockSource+0xa6>
 8002ac6:	2b70      	cmp	r3, #112	; 0x70
 8002ac8:	d87b      	bhi.n	8002bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002aca:	2b60      	cmp	r3, #96	; 0x60
 8002acc:	d050      	beq.n	8002b70 <HAL_TIM_ConfigClockSource+0x11a>
 8002ace:	2b60      	cmp	r3, #96	; 0x60
 8002ad0:	d877      	bhi.n	8002bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad2:	2b50      	cmp	r3, #80	; 0x50
 8002ad4:	d03c      	beq.n	8002b50 <HAL_TIM_ConfigClockSource+0xfa>
 8002ad6:	2b50      	cmp	r3, #80	; 0x50
 8002ad8:	d873      	bhi.n	8002bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ada:	2b40      	cmp	r3, #64	; 0x40
 8002adc:	d058      	beq.n	8002b90 <HAL_TIM_ConfigClockSource+0x13a>
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d86f      	bhi.n	8002bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae2:	2b30      	cmp	r3, #48	; 0x30
 8002ae4:	d064      	beq.n	8002bb0 <HAL_TIM_ConfigClockSource+0x15a>
 8002ae6:	2b30      	cmp	r3, #48	; 0x30
 8002ae8:	d86b      	bhi.n	8002bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d060      	beq.n	8002bb0 <HAL_TIM_ConfigClockSource+0x15a>
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d867      	bhi.n	8002bc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d05c      	beq.n	8002bb0 <HAL_TIM_ConfigClockSource+0x15a>
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d05a      	beq.n	8002bb0 <HAL_TIM_ConfigClockSource+0x15a>
 8002afa:	e062      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f000 f964 	bl	8002dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	609a      	str	r2, [r3, #8]
      break;
 8002b28:	e04f      	b.n	8002bca <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6899      	ldr	r1, [r3, #8]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f000 f94d 	bl	8002dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b4c:	609a      	str	r2, [r3, #8]
      break;
 8002b4e:	e03c      	b.n	8002bca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f000 f8c1 	bl	8002ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2150      	movs	r1, #80	; 0x50
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f91a 	bl	8002da2 <TIM_ITRx_SetConfig>
      break;
 8002b6e:	e02c      	b.n	8002bca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f000 f8e0 	bl	8002d42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2160      	movs	r1, #96	; 0x60
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f90a 	bl	8002da2 <TIM_ITRx_SetConfig>
      break;
 8002b8e:	e01c      	b.n	8002bca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f000 f8a1 	bl	8002ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2140      	movs	r1, #64	; 0x40
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 f8fa 	bl	8002da2 <TIM_ITRx_SetConfig>
      break;
 8002bae:	e00c      	b.n	8002bca <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f000 f8f1 	bl	8002da2 <TIM_ITRx_SetConfig>
      break;
 8002bc0:	e003      	b.n	8002bca <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc6:	e000      	b.n	8002bca <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a34      	ldr	r2, [pc, #208]	; (8002cc8 <TIM_Base_SetConfig+0xe4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00f      	beq.n	8002c1c <TIM_Base_SetConfig+0x38>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c02:	d00b      	beq.n	8002c1c <TIM_Base_SetConfig+0x38>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <TIM_Base_SetConfig+0xe8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <TIM_Base_SetConfig+0x38>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a30      	ldr	r2, [pc, #192]	; (8002cd0 <TIM_Base_SetConfig+0xec>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0x38>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <TIM_Base_SetConfig+0xf0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d108      	bne.n	8002c2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <TIM_Base_SetConfig+0xe4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01b      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d017      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <TIM_Base_SetConfig+0xe8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <TIM_Base_SetConfig+0xec>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00f      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <TIM_Base_SetConfig+0xf0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <TIM_Base_SetConfig+0xf4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1e      	ldr	r2, [pc, #120]	; (8002cdc <TIM_Base_SetConfig+0xf8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_Base_SetConfig+0x8a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <TIM_Base_SetConfig+0xfc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <TIM_Base_SetConfig+0xe4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d103      	bne.n	8002cb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	615a      	str	r2, [r3, #20]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40000400 	.word	0x40000400
 8002cd0:	40000800 	.word	0x40000800
 8002cd4:	40000c00 	.word	0x40000c00
 8002cd8:	40014000 	.word	0x40014000
 8002cdc:	40014400 	.word	0x40014400
 8002ce0:	40014800 	.word	0x40014800

08002ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f023 0201 	bic.w	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f023 030a 	bic.w	r3, r3, #10
 8002d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b087      	sub	sp, #28
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0210 	bic.w	r2, r3, #16
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	031b      	lsls	r3, r3, #12
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f043 0307 	orr.w	r3, r3, #7
 8002dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	021a      	lsls	r2, r3, #8
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	609a      	str	r2, [r3, #8]
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e050      	b.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d018      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d013      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00e      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a15      	ldr	r2, [pc, #84]	; (8002eec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d004      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40010000 	.word	0x40010000
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40000800 	.word	0x40000800
 8002eec:	40000c00 	.word	0x40000c00
 8002ef0:	40014000 	.word	0x40014000

08002ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e03f      	b.n	8002f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe fcf8 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2224      	movs	r2, #36	; 0x24
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f829 	bl	8002f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f94:	b0c0      	sub	sp, #256	; 0x100
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	68d9      	ldr	r1, [r3, #12]
 8002fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	ea40 0301 	orr.w	r3, r0, r1
 8002fb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fe8:	f021 010c 	bic.w	r1, r1, #12
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300a:	6999      	ldr	r1, [r3, #24]
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	ea40 0301 	orr.w	r3, r0, r1
 8003016:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4b8f      	ldr	r3, [pc, #572]	; (800325c <UART_SetConfig+0x2cc>)
 8003020:	429a      	cmp	r2, r3
 8003022:	d005      	beq.n	8003030 <UART_SetConfig+0xa0>
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4b8d      	ldr	r3, [pc, #564]	; (8003260 <UART_SetConfig+0x2d0>)
 800302c:	429a      	cmp	r2, r3
 800302e:	d104      	bne.n	800303a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003030:	f7ff fcae 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 8003034:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003038:	e003      	b.n	8003042 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800303a:	f7ff fc95 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 800303e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304c:	f040 810c 	bne.w	8003268 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003054:	2200      	movs	r2, #0
 8003056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800305a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800305e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003062:	4622      	mov	r2, r4
 8003064:	462b      	mov	r3, r5
 8003066:	1891      	adds	r1, r2, r2
 8003068:	65b9      	str	r1, [r7, #88]	; 0x58
 800306a:	415b      	adcs	r3, r3
 800306c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800306e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003072:	4621      	mov	r1, r4
 8003074:	eb12 0801 	adds.w	r8, r2, r1
 8003078:	4629      	mov	r1, r5
 800307a:	eb43 0901 	adc.w	r9, r3, r1
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800308e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003092:	4690      	mov	r8, r2
 8003094:	4699      	mov	r9, r3
 8003096:	4623      	mov	r3, r4
 8003098:	eb18 0303 	adds.w	r3, r8, r3
 800309c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030a0:	462b      	mov	r3, r5
 80030a2:	eb49 0303 	adc.w	r3, r9, r3
 80030a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030be:	460b      	mov	r3, r1
 80030c0:	18db      	adds	r3, r3, r3
 80030c2:	653b      	str	r3, [r7, #80]	; 0x50
 80030c4:	4613      	mov	r3, r2
 80030c6:	eb42 0303 	adc.w	r3, r2, r3
 80030ca:	657b      	str	r3, [r7, #84]	; 0x54
 80030cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030d4:	f7fd fd64 	bl	8000ba0 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4b61      	ldr	r3, [pc, #388]	; (8003264 <UART_SetConfig+0x2d4>)
 80030de:	fba3 2302 	umull	r2, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	011c      	lsls	r4, r3, #4
 80030e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030f8:	4642      	mov	r2, r8
 80030fa:	464b      	mov	r3, r9
 80030fc:	1891      	adds	r1, r2, r2
 80030fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003100:	415b      	adcs	r3, r3
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003104:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003108:	4641      	mov	r1, r8
 800310a:	eb12 0a01 	adds.w	sl, r2, r1
 800310e:	4649      	mov	r1, r9
 8003110:	eb43 0b01 	adc.w	fp, r3, r1
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003120:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003128:	4692      	mov	sl, r2
 800312a:	469b      	mov	fp, r3
 800312c:	4643      	mov	r3, r8
 800312e:	eb1a 0303 	adds.w	r3, sl, r3
 8003132:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003136:	464b      	mov	r3, r9
 8003138:	eb4b 0303 	adc.w	r3, fp, r3
 800313c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800314c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003150:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003154:	460b      	mov	r3, r1
 8003156:	18db      	adds	r3, r3, r3
 8003158:	643b      	str	r3, [r7, #64]	; 0x40
 800315a:	4613      	mov	r3, r2
 800315c:	eb42 0303 	adc.w	r3, r2, r3
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
 8003162:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800316a:	f7fd fd19 	bl	8000ba0 <__aeabi_uldivmod>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4611      	mov	r1, r2
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <UART_SetConfig+0x2d4>)
 8003176:	fba3 2301 	umull	r2, r3, r3, r1
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2264      	movs	r2, #100	; 0x64
 800317e:	fb02 f303 	mul.w	r3, r2, r3
 8003182:	1acb      	subs	r3, r1, r3
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <UART_SetConfig+0x2d4>)
 800318c:	fba3 2302 	umull	r2, r3, r3, r2
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003198:	441c      	add	r4, r3
 800319a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800319e:	2200      	movs	r2, #0
 80031a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031ac:	4642      	mov	r2, r8
 80031ae:	464b      	mov	r3, r9
 80031b0:	1891      	adds	r1, r2, r2
 80031b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80031b4:	415b      	adcs	r3, r3
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031bc:	4641      	mov	r1, r8
 80031be:	1851      	adds	r1, r2, r1
 80031c0:	6339      	str	r1, [r7, #48]	; 0x30
 80031c2:	4649      	mov	r1, r9
 80031c4:	414b      	adcs	r3, r1
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031d4:	4659      	mov	r1, fp
 80031d6:	00cb      	lsls	r3, r1, #3
 80031d8:	4651      	mov	r1, sl
 80031da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031de:	4651      	mov	r1, sl
 80031e0:	00ca      	lsls	r2, r1, #3
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	4642      	mov	r2, r8
 80031ea:	189b      	adds	r3, r3, r2
 80031ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031f0:	464b      	mov	r3, r9
 80031f2:	460a      	mov	r2, r1
 80031f4:	eb42 0303 	adc.w	r3, r2, r3
 80031f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003208:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800320c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003210:	460b      	mov	r3, r1
 8003212:	18db      	adds	r3, r3, r3
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
 8003216:	4613      	mov	r3, r2
 8003218:	eb42 0303 	adc.w	r3, r2, r3
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003222:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003226:	f7fd fcbb 	bl	8000ba0 <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <UART_SetConfig+0x2d4>)
 8003230:	fba3 1302 	umull	r1, r3, r3, r2
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	2164      	movs	r1, #100	; 0x64
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	3332      	adds	r3, #50	; 0x32
 8003242:	4a08      	ldr	r2, [pc, #32]	; (8003264 <UART_SetConfig+0x2d4>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	095b      	lsrs	r3, r3, #5
 800324a:	f003 0207 	and.w	r2, r3, #7
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4422      	add	r2, r4
 8003256:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003258:	e105      	b.n	8003466 <UART_SetConfig+0x4d6>
 800325a:	bf00      	nop
 800325c:	40011000 	.word	0x40011000
 8003260:	40011400 	.word	0x40011400
 8003264:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326c:	2200      	movs	r2, #0
 800326e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003272:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003276:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800327a:	4642      	mov	r2, r8
 800327c:	464b      	mov	r3, r9
 800327e:	1891      	adds	r1, r2, r2
 8003280:	6239      	str	r1, [r7, #32]
 8003282:	415b      	adcs	r3, r3
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
 8003286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800328a:	4641      	mov	r1, r8
 800328c:	1854      	adds	r4, r2, r1
 800328e:	4649      	mov	r1, r9
 8003290:	eb43 0501 	adc.w	r5, r3, r1
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	00eb      	lsls	r3, r5, #3
 800329e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032a2:	00e2      	lsls	r2, r4, #3
 80032a4:	4614      	mov	r4, r2
 80032a6:	461d      	mov	r5, r3
 80032a8:	4643      	mov	r3, r8
 80032aa:	18e3      	adds	r3, r4, r3
 80032ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032b0:	464b      	mov	r3, r9
 80032b2:	eb45 0303 	adc.w	r3, r5, r3
 80032b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032d6:	4629      	mov	r1, r5
 80032d8:	008b      	lsls	r3, r1, #2
 80032da:	4621      	mov	r1, r4
 80032dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e0:	4621      	mov	r1, r4
 80032e2:	008a      	lsls	r2, r1, #2
 80032e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032e8:	f7fd fc5a 	bl	8000ba0 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4b60      	ldr	r3, [pc, #384]	; (8003474 <UART_SetConfig+0x4e4>)
 80032f2:	fba3 2302 	umull	r2, r3, r3, r2
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	011c      	lsls	r4, r3, #4
 80032fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032fe:	2200      	movs	r2, #0
 8003300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003304:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003308:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800330c:	4642      	mov	r2, r8
 800330e:	464b      	mov	r3, r9
 8003310:	1891      	adds	r1, r2, r2
 8003312:	61b9      	str	r1, [r7, #24]
 8003314:	415b      	adcs	r3, r3
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800331c:	4641      	mov	r1, r8
 800331e:	1851      	adds	r1, r2, r1
 8003320:	6139      	str	r1, [r7, #16]
 8003322:	4649      	mov	r1, r9
 8003324:	414b      	adcs	r3, r1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003334:	4659      	mov	r1, fp
 8003336:	00cb      	lsls	r3, r1, #3
 8003338:	4651      	mov	r1, sl
 800333a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800333e:	4651      	mov	r1, sl
 8003340:	00ca      	lsls	r2, r1, #3
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	4603      	mov	r3, r0
 8003348:	4642      	mov	r2, r8
 800334a:	189b      	adds	r3, r3, r2
 800334c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003350:	464b      	mov	r3, r9
 8003352:	460a      	mov	r2, r1
 8003354:	eb42 0303 	adc.w	r3, r2, r3
 8003358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	67bb      	str	r3, [r7, #120]	; 0x78
 8003366:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003374:	4649      	mov	r1, r9
 8003376:	008b      	lsls	r3, r1, #2
 8003378:	4641      	mov	r1, r8
 800337a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800337e:	4641      	mov	r1, r8
 8003380:	008a      	lsls	r2, r1, #2
 8003382:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003386:	f7fd fc0b 	bl	8000ba0 <__aeabi_uldivmod>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4b39      	ldr	r3, [pc, #228]	; (8003474 <UART_SetConfig+0x4e4>)
 8003390:	fba3 1302 	umull	r1, r3, r3, r2
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	2164      	movs	r1, #100	; 0x64
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	3332      	adds	r3, #50	; 0x32
 80033a2:	4a34      	ldr	r2, [pc, #208]	; (8003474 <UART_SetConfig+0x4e4>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ae:	441c      	add	r4, r3
 80033b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033b4:	2200      	movs	r2, #0
 80033b6:	673b      	str	r3, [r7, #112]	; 0x70
 80033b8:	677a      	str	r2, [r7, #116]	; 0x74
 80033ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033be:	4642      	mov	r2, r8
 80033c0:	464b      	mov	r3, r9
 80033c2:	1891      	adds	r1, r2, r2
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	415b      	adcs	r3, r3
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ce:	4641      	mov	r1, r8
 80033d0:	1851      	adds	r1, r2, r1
 80033d2:	6039      	str	r1, [r7, #0]
 80033d4:	4649      	mov	r1, r9
 80033d6:	414b      	adcs	r3, r1
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033e6:	4659      	mov	r1, fp
 80033e8:	00cb      	lsls	r3, r1, #3
 80033ea:	4651      	mov	r1, sl
 80033ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033f0:	4651      	mov	r1, sl
 80033f2:	00ca      	lsls	r2, r1, #3
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	4603      	mov	r3, r0
 80033fa:	4642      	mov	r2, r8
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003400:	464b      	mov	r3, r9
 8003402:	460a      	mov	r2, r1
 8003404:	eb42 0303 	adc.w	r3, r2, r3
 8003408:	66fb      	str	r3, [r7, #108]	; 0x6c
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	663b      	str	r3, [r7, #96]	; 0x60
 8003414:	667a      	str	r2, [r7, #100]	; 0x64
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003422:	4649      	mov	r1, r9
 8003424:	008b      	lsls	r3, r1, #2
 8003426:	4641      	mov	r1, r8
 8003428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342c:	4641      	mov	r1, r8
 800342e:	008a      	lsls	r2, r1, #2
 8003430:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003434:	f7fd fbb4 	bl	8000ba0 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <UART_SetConfig+0x4e4>)
 800343e:	fba3 1302 	umull	r1, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2164      	movs	r1, #100	; 0x64
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	3332      	adds	r3, #50	; 0x32
 8003450:	4a08      	ldr	r2, [pc, #32]	; (8003474 <UART_SetConfig+0x4e4>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4422      	add	r2, r4
 8003464:	609a      	str	r2, [r3, #8]
}
 8003466:	bf00      	nop
 8003468:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800346c:	46bd      	mov	sp, r7
 800346e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003472:	bf00      	nop
 8003474:	51eb851f 	.word	0x51eb851f

08003478 <__errno>:
 8003478:	4b01      	ldr	r3, [pc, #4]	; (8003480 <__errno+0x8>)
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	2000000c 	.word	0x2000000c

08003484 <__libc_init_array>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4d0d      	ldr	r5, [pc, #52]	; (80034bc <__libc_init_array+0x38>)
 8003488:	4c0d      	ldr	r4, [pc, #52]	; (80034c0 <__libc_init_array+0x3c>)
 800348a:	1b64      	subs	r4, r4, r5
 800348c:	10a4      	asrs	r4, r4, #2
 800348e:	2600      	movs	r6, #0
 8003490:	42a6      	cmp	r6, r4
 8003492:	d109      	bne.n	80034a8 <__libc_init_array+0x24>
 8003494:	4d0b      	ldr	r5, [pc, #44]	; (80034c4 <__libc_init_array+0x40>)
 8003496:	4c0c      	ldr	r4, [pc, #48]	; (80034c8 <__libc_init_array+0x44>)
 8003498:	f001 fbb8 	bl	8004c0c <_init>
 800349c:	1b64      	subs	r4, r4, r5
 800349e:	10a4      	asrs	r4, r4, #2
 80034a0:	2600      	movs	r6, #0
 80034a2:	42a6      	cmp	r6, r4
 80034a4:	d105      	bne.n	80034b2 <__libc_init_array+0x2e>
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
 80034a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ac:	4798      	blx	r3
 80034ae:	3601      	adds	r6, #1
 80034b0:	e7ee      	b.n	8003490 <__libc_init_array+0xc>
 80034b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b6:	4798      	blx	r3
 80034b8:	3601      	adds	r6, #1
 80034ba:	e7f2      	b.n	80034a2 <__libc_init_array+0x1e>
 80034bc:	08004e28 	.word	0x08004e28
 80034c0:	08004e28 	.word	0x08004e28
 80034c4:	08004e28 	.word	0x08004e28
 80034c8:	08004e2c 	.word	0x08004e2c

080034cc <memset>:
 80034cc:	4402      	add	r2, r0
 80034ce:	4603      	mov	r3, r0
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d100      	bne.n	80034d6 <memset+0xa>
 80034d4:	4770      	bx	lr
 80034d6:	f803 1b01 	strb.w	r1, [r3], #1
 80034da:	e7f9      	b.n	80034d0 <memset+0x4>
 80034dc:	0000      	movs	r0, r0
	...

080034e0 <cos>:
 80034e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034e2:	ec53 2b10 	vmov	r2, r3, d0
 80034e6:	4826      	ldr	r0, [pc, #152]	; (8003580 <cos+0xa0>)
 80034e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80034ec:	4281      	cmp	r1, r0
 80034ee:	dc06      	bgt.n	80034fe <cos+0x1e>
 80034f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003578 <cos+0x98>
 80034f4:	b005      	add	sp, #20
 80034f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80034fa:	f000 bd99 	b.w	8004030 <__kernel_cos>
 80034fe:	4821      	ldr	r0, [pc, #132]	; (8003584 <cos+0xa4>)
 8003500:	4281      	cmp	r1, r0
 8003502:	dd09      	ble.n	8003518 <cos+0x38>
 8003504:	ee10 0a10 	vmov	r0, s0
 8003508:	4619      	mov	r1, r3
 800350a:	f7fc fe69 	bl	80001e0 <__aeabi_dsub>
 800350e:	ec41 0b10 	vmov	d0, r0, r1
 8003512:	b005      	add	sp, #20
 8003514:	f85d fb04 	ldr.w	pc, [sp], #4
 8003518:	4668      	mov	r0, sp
 800351a:	f000 fac9 	bl	8003ab0 <__ieee754_rem_pio2>
 800351e:	f000 0003 	and.w	r0, r0, #3
 8003522:	2801      	cmp	r0, #1
 8003524:	d00b      	beq.n	800353e <cos+0x5e>
 8003526:	2802      	cmp	r0, #2
 8003528:	d016      	beq.n	8003558 <cos+0x78>
 800352a:	b9e0      	cbnz	r0, 8003566 <cos+0x86>
 800352c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003530:	ed9d 0b00 	vldr	d0, [sp]
 8003534:	f000 fd7c 	bl	8004030 <__kernel_cos>
 8003538:	ec51 0b10 	vmov	r0, r1, d0
 800353c:	e7e7      	b.n	800350e <cos+0x2e>
 800353e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003542:	ed9d 0b00 	vldr	d0, [sp]
 8003546:	f001 f98b 	bl	8004860 <__kernel_sin>
 800354a:	ec53 2b10 	vmov	r2, r3, d0
 800354e:	ee10 0a10 	vmov	r0, s0
 8003552:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003556:	e7da      	b.n	800350e <cos+0x2e>
 8003558:	ed9d 1b02 	vldr	d1, [sp, #8]
 800355c:	ed9d 0b00 	vldr	d0, [sp]
 8003560:	f000 fd66 	bl	8004030 <__kernel_cos>
 8003564:	e7f1      	b.n	800354a <cos+0x6a>
 8003566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800356a:	ed9d 0b00 	vldr	d0, [sp]
 800356e:	2001      	movs	r0, #1
 8003570:	f001 f976 	bl	8004860 <__kernel_sin>
 8003574:	e7e0      	b.n	8003538 <cos+0x58>
 8003576:	bf00      	nop
	...
 8003580:	3fe921fb 	.word	0x3fe921fb
 8003584:	7fefffff 	.word	0x7fefffff

08003588 <acos>:
 8003588:	b538      	push	{r3, r4, r5, lr}
 800358a:	ed2d 8b02 	vpush	{d8}
 800358e:	ec55 4b10 	vmov	r4, r5, d0
 8003592:	f000 f82d 	bl	80035f0 <__ieee754_acos>
 8003596:	4622      	mov	r2, r4
 8003598:	462b      	mov	r3, r5
 800359a:	4620      	mov	r0, r4
 800359c:	4629      	mov	r1, r5
 800359e:	eeb0 8a40 	vmov.f32	s16, s0
 80035a2:	eef0 8a60 	vmov.f32	s17, s1
 80035a6:	f7fd fa6d 	bl	8000a84 <__aeabi_dcmpun>
 80035aa:	b9a8      	cbnz	r0, 80035d8 <acos+0x50>
 80035ac:	ec45 4b10 	vmov	d0, r4, r5
 80035b0:	f001 fa14 	bl	80049dc <fabs>
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <acos+0x60>)
 80035b6:	ec51 0b10 	vmov	r0, r1, d0
 80035ba:	2200      	movs	r2, #0
 80035bc:	f7fd fa58 	bl	8000a70 <__aeabi_dcmpgt>
 80035c0:	b150      	cbz	r0, 80035d8 <acos+0x50>
 80035c2:	f7ff ff59 	bl	8003478 <__errno>
 80035c6:	ecbd 8b02 	vpop	{d8}
 80035ca:	2321      	movs	r3, #33	; 0x21
 80035cc:	6003      	str	r3, [r0, #0]
 80035ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035d2:	4806      	ldr	r0, [pc, #24]	; (80035ec <acos+0x64>)
 80035d4:	f001 ba8c 	b.w	8004af0 <nan>
 80035d8:	eeb0 0a48 	vmov.f32	s0, s16
 80035dc:	eef0 0a68 	vmov.f32	s1, s17
 80035e0:	ecbd 8b02 	vpop	{d8}
 80035e4:	bd38      	pop	{r3, r4, r5, pc}
 80035e6:	bf00      	nop
 80035e8:	3ff00000 	.word	0x3ff00000
 80035ec:	08004c40 	.word	0x08004c40

080035f0 <__ieee754_acos>:
 80035f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f4:	ec55 4b10 	vmov	r4, r5, d0
 80035f8:	49b7      	ldr	r1, [pc, #732]	; (80038d8 <__ieee754_acos+0x2e8>)
 80035fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80035fe:	428b      	cmp	r3, r1
 8003600:	dd1b      	ble.n	800363a <__ieee754_acos+0x4a>
 8003602:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8003606:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800360a:	4323      	orrs	r3, r4
 800360c:	d106      	bne.n	800361c <__ieee754_acos+0x2c>
 800360e:	2d00      	cmp	r5, #0
 8003610:	f300 8211 	bgt.w	8003a36 <__ieee754_acos+0x446>
 8003614:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8003870 <__ieee754_acos+0x280>
 8003618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800361c:	ee10 2a10 	vmov	r2, s0
 8003620:	462b      	mov	r3, r5
 8003622:	ee10 0a10 	vmov	r0, s0
 8003626:	4629      	mov	r1, r5
 8003628:	f7fc fdda 	bl	80001e0 <__aeabi_dsub>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	f7fd f8b8 	bl	80007a4 <__aeabi_ddiv>
 8003634:	ec41 0b10 	vmov	d0, r0, r1
 8003638:	e7ee      	b.n	8003618 <__ieee754_acos+0x28>
 800363a:	49a8      	ldr	r1, [pc, #672]	; (80038dc <__ieee754_acos+0x2ec>)
 800363c:	428b      	cmp	r3, r1
 800363e:	f300 8087 	bgt.w	8003750 <__ieee754_acos+0x160>
 8003642:	4aa7      	ldr	r2, [pc, #668]	; (80038e0 <__ieee754_acos+0x2f0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	f340 81f9 	ble.w	8003a3c <__ieee754_acos+0x44c>
 800364a:	ee10 2a10 	vmov	r2, s0
 800364e:	ee10 0a10 	vmov	r0, s0
 8003652:	462b      	mov	r3, r5
 8003654:	4629      	mov	r1, r5
 8003656:	f7fc ff7b 	bl	8000550 <__aeabi_dmul>
 800365a:	a387      	add	r3, pc, #540	; (adr r3, 8003878 <__ieee754_acos+0x288>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	4606      	mov	r6, r0
 8003662:	460f      	mov	r7, r1
 8003664:	f7fc ff74 	bl	8000550 <__aeabi_dmul>
 8003668:	a385      	add	r3, pc, #532	; (adr r3, 8003880 <__ieee754_acos+0x290>)
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f7fc fdb9 	bl	80001e4 <__adddf3>
 8003672:	4632      	mov	r2, r6
 8003674:	463b      	mov	r3, r7
 8003676:	f7fc ff6b 	bl	8000550 <__aeabi_dmul>
 800367a:	a383      	add	r3, pc, #524	; (adr r3, 8003888 <__ieee754_acos+0x298>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f7fc fdae 	bl	80001e0 <__aeabi_dsub>
 8003684:	4632      	mov	r2, r6
 8003686:	463b      	mov	r3, r7
 8003688:	f7fc ff62 	bl	8000550 <__aeabi_dmul>
 800368c:	a380      	add	r3, pc, #512	; (adr r3, 8003890 <__ieee754_acos+0x2a0>)
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f7fc fda7 	bl	80001e4 <__adddf3>
 8003696:	4632      	mov	r2, r6
 8003698:	463b      	mov	r3, r7
 800369a:	f7fc ff59 	bl	8000550 <__aeabi_dmul>
 800369e:	a37e      	add	r3, pc, #504	; (adr r3, 8003898 <__ieee754_acos+0x2a8>)
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f7fc fd9c 	bl	80001e0 <__aeabi_dsub>
 80036a8:	4632      	mov	r2, r6
 80036aa:	463b      	mov	r3, r7
 80036ac:	f7fc ff50 	bl	8000550 <__aeabi_dmul>
 80036b0:	a37b      	add	r3, pc, #492	; (adr r3, 80038a0 <__ieee754_acos+0x2b0>)
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f7fc fd95 	bl	80001e4 <__adddf3>
 80036ba:	4632      	mov	r2, r6
 80036bc:	463b      	mov	r3, r7
 80036be:	f7fc ff47 	bl	8000550 <__aeabi_dmul>
 80036c2:	a379      	add	r3, pc, #484	; (adr r3, 80038a8 <__ieee754_acos+0x2b8>)
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	4680      	mov	r8, r0
 80036ca:	4689      	mov	r9, r1
 80036cc:	4630      	mov	r0, r6
 80036ce:	4639      	mov	r1, r7
 80036d0:	f7fc ff3e 	bl	8000550 <__aeabi_dmul>
 80036d4:	a376      	add	r3, pc, #472	; (adr r3, 80038b0 <__ieee754_acos+0x2c0>)
 80036d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036da:	f7fc fd81 	bl	80001e0 <__aeabi_dsub>
 80036de:	4632      	mov	r2, r6
 80036e0:	463b      	mov	r3, r7
 80036e2:	f7fc ff35 	bl	8000550 <__aeabi_dmul>
 80036e6:	a374      	add	r3, pc, #464	; (adr r3, 80038b8 <__ieee754_acos+0x2c8>)
 80036e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ec:	f7fc fd7a 	bl	80001e4 <__adddf3>
 80036f0:	4632      	mov	r2, r6
 80036f2:	463b      	mov	r3, r7
 80036f4:	f7fc ff2c 	bl	8000550 <__aeabi_dmul>
 80036f8:	a371      	add	r3, pc, #452	; (adr r3, 80038c0 <__ieee754_acos+0x2d0>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f7fc fd6f 	bl	80001e0 <__aeabi_dsub>
 8003702:	4632      	mov	r2, r6
 8003704:	463b      	mov	r3, r7
 8003706:	f7fc ff23 	bl	8000550 <__aeabi_dmul>
 800370a:	4b76      	ldr	r3, [pc, #472]	; (80038e4 <__ieee754_acos+0x2f4>)
 800370c:	2200      	movs	r2, #0
 800370e:	f7fc fd69 	bl	80001e4 <__adddf3>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4640      	mov	r0, r8
 8003718:	4649      	mov	r1, r9
 800371a:	f7fd f843 	bl	80007a4 <__aeabi_ddiv>
 800371e:	4622      	mov	r2, r4
 8003720:	462b      	mov	r3, r5
 8003722:	f7fc ff15 	bl	8000550 <__aeabi_dmul>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	a167      	add	r1, pc, #412	; (adr r1, 80038c8 <__ieee754_acos+0x2d8>)
 800372c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003730:	f7fc fd56 	bl	80001e0 <__aeabi_dsub>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4620      	mov	r0, r4
 800373a:	4629      	mov	r1, r5
 800373c:	f7fc fd50 	bl	80001e0 <__aeabi_dsub>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	a162      	add	r1, pc, #392	; (adr r1, 80038d0 <__ieee754_acos+0x2e0>)
 8003746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800374a:	f7fc fd49 	bl	80001e0 <__aeabi_dsub>
 800374e:	e771      	b.n	8003634 <__ieee754_acos+0x44>
 8003750:	2d00      	cmp	r5, #0
 8003752:	f280 80cb 	bge.w	80038ec <__ieee754_acos+0x2fc>
 8003756:	ee10 0a10 	vmov	r0, s0
 800375a:	4b62      	ldr	r3, [pc, #392]	; (80038e4 <__ieee754_acos+0x2f4>)
 800375c:	2200      	movs	r2, #0
 800375e:	4629      	mov	r1, r5
 8003760:	f7fc fd40 	bl	80001e4 <__adddf3>
 8003764:	4b60      	ldr	r3, [pc, #384]	; (80038e8 <__ieee754_acos+0x2f8>)
 8003766:	2200      	movs	r2, #0
 8003768:	f7fc fef2 	bl	8000550 <__aeabi_dmul>
 800376c:	a342      	add	r3, pc, #264	; (adr r3, 8003878 <__ieee754_acos+0x288>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	4604      	mov	r4, r0
 8003774:	460d      	mov	r5, r1
 8003776:	f7fc feeb 	bl	8000550 <__aeabi_dmul>
 800377a:	a341      	add	r3, pc, #260	; (adr r3, 8003880 <__ieee754_acos+0x290>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f7fc fd30 	bl	80001e4 <__adddf3>
 8003784:	4622      	mov	r2, r4
 8003786:	462b      	mov	r3, r5
 8003788:	f7fc fee2 	bl	8000550 <__aeabi_dmul>
 800378c:	a33e      	add	r3, pc, #248	; (adr r3, 8003888 <__ieee754_acos+0x298>)
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f7fc fd25 	bl	80001e0 <__aeabi_dsub>
 8003796:	4622      	mov	r2, r4
 8003798:	462b      	mov	r3, r5
 800379a:	f7fc fed9 	bl	8000550 <__aeabi_dmul>
 800379e:	a33c      	add	r3, pc, #240	; (adr r3, 8003890 <__ieee754_acos+0x2a0>)
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f7fc fd1e 	bl	80001e4 <__adddf3>
 80037a8:	4622      	mov	r2, r4
 80037aa:	462b      	mov	r3, r5
 80037ac:	f7fc fed0 	bl	8000550 <__aeabi_dmul>
 80037b0:	a339      	add	r3, pc, #228	; (adr r3, 8003898 <__ieee754_acos+0x2a8>)
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f7fc fd13 	bl	80001e0 <__aeabi_dsub>
 80037ba:	4622      	mov	r2, r4
 80037bc:	462b      	mov	r3, r5
 80037be:	f7fc fec7 	bl	8000550 <__aeabi_dmul>
 80037c2:	a337      	add	r3, pc, #220	; (adr r3, 80038a0 <__ieee754_acos+0x2b0>)
 80037c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c8:	f7fc fd0c 	bl	80001e4 <__adddf3>
 80037cc:	4622      	mov	r2, r4
 80037ce:	462b      	mov	r3, r5
 80037d0:	f7fc febe 	bl	8000550 <__aeabi_dmul>
 80037d4:	ec45 4b10 	vmov	d0, r4, r5
 80037d8:	4680      	mov	r8, r0
 80037da:	4689      	mov	r9, r1
 80037dc:	f000 fb74 	bl	8003ec8 <__ieee754_sqrt>
 80037e0:	a331      	add	r3, pc, #196	; (adr r3, 80038a8 <__ieee754_acos+0x2b8>)
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	4620      	mov	r0, r4
 80037e8:	4629      	mov	r1, r5
 80037ea:	ec57 6b10 	vmov	r6, r7, d0
 80037ee:	f7fc feaf 	bl	8000550 <__aeabi_dmul>
 80037f2:	a32f      	add	r3, pc, #188	; (adr r3, 80038b0 <__ieee754_acos+0x2c0>)
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f7fc fcf2 	bl	80001e0 <__aeabi_dsub>
 80037fc:	4622      	mov	r2, r4
 80037fe:	462b      	mov	r3, r5
 8003800:	f7fc fea6 	bl	8000550 <__aeabi_dmul>
 8003804:	a32c      	add	r3, pc, #176	; (adr r3, 80038b8 <__ieee754_acos+0x2c8>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f7fc fceb 	bl	80001e4 <__adddf3>
 800380e:	4622      	mov	r2, r4
 8003810:	462b      	mov	r3, r5
 8003812:	f7fc fe9d 	bl	8000550 <__aeabi_dmul>
 8003816:	a32a      	add	r3, pc, #168	; (adr r3, 80038c0 <__ieee754_acos+0x2d0>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f7fc fce0 	bl	80001e0 <__aeabi_dsub>
 8003820:	4622      	mov	r2, r4
 8003822:	462b      	mov	r3, r5
 8003824:	f7fc fe94 	bl	8000550 <__aeabi_dmul>
 8003828:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <__ieee754_acos+0x2f4>)
 800382a:	2200      	movs	r2, #0
 800382c:	f7fc fcda 	bl	80001e4 <__adddf3>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4640      	mov	r0, r8
 8003836:	4649      	mov	r1, r9
 8003838:	f7fc ffb4 	bl	80007a4 <__aeabi_ddiv>
 800383c:	4632      	mov	r2, r6
 800383e:	463b      	mov	r3, r7
 8003840:	f7fc fe86 	bl	8000550 <__aeabi_dmul>
 8003844:	a320      	add	r3, pc, #128	; (adr r3, 80038c8 <__ieee754_acos+0x2d8>)
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f7fc fcc9 	bl	80001e0 <__aeabi_dsub>
 800384e:	4632      	mov	r2, r6
 8003850:	463b      	mov	r3, r7
 8003852:	f7fc fcc7 	bl	80001e4 <__adddf3>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	f7fc fcc3 	bl	80001e4 <__adddf3>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	a103      	add	r1, pc, #12	; (adr r1, 8003870 <__ieee754_acos+0x280>)
 8003864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003868:	e76f      	b.n	800374a <__ieee754_acos+0x15a>
 800386a:	bf00      	nop
 800386c:	f3af 8000 	nop.w
 8003870:	54442d18 	.word	0x54442d18
 8003874:	400921fb 	.word	0x400921fb
 8003878:	0dfdf709 	.word	0x0dfdf709
 800387c:	3f023de1 	.word	0x3f023de1
 8003880:	7501b288 	.word	0x7501b288
 8003884:	3f49efe0 	.word	0x3f49efe0
 8003888:	b5688f3b 	.word	0xb5688f3b
 800388c:	3fa48228 	.word	0x3fa48228
 8003890:	0e884455 	.word	0x0e884455
 8003894:	3fc9c155 	.word	0x3fc9c155
 8003898:	03eb6f7d 	.word	0x03eb6f7d
 800389c:	3fd4d612 	.word	0x3fd4d612
 80038a0:	55555555 	.word	0x55555555
 80038a4:	3fc55555 	.word	0x3fc55555
 80038a8:	b12e9282 	.word	0xb12e9282
 80038ac:	3fb3b8c5 	.word	0x3fb3b8c5
 80038b0:	1b8d0159 	.word	0x1b8d0159
 80038b4:	3fe6066c 	.word	0x3fe6066c
 80038b8:	9c598ac8 	.word	0x9c598ac8
 80038bc:	40002ae5 	.word	0x40002ae5
 80038c0:	1c8a2d4b 	.word	0x1c8a2d4b
 80038c4:	40033a27 	.word	0x40033a27
 80038c8:	33145c07 	.word	0x33145c07
 80038cc:	3c91a626 	.word	0x3c91a626
 80038d0:	54442d18 	.word	0x54442d18
 80038d4:	3ff921fb 	.word	0x3ff921fb
 80038d8:	3fefffff 	.word	0x3fefffff
 80038dc:	3fdfffff 	.word	0x3fdfffff
 80038e0:	3c600000 	.word	0x3c600000
 80038e4:	3ff00000 	.word	0x3ff00000
 80038e8:	3fe00000 	.word	0x3fe00000
 80038ec:	ee10 2a10 	vmov	r2, s0
 80038f0:	462b      	mov	r3, r5
 80038f2:	496d      	ldr	r1, [pc, #436]	; (8003aa8 <__ieee754_acos+0x4b8>)
 80038f4:	2000      	movs	r0, #0
 80038f6:	f7fc fc73 	bl	80001e0 <__aeabi_dsub>
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <__ieee754_acos+0x4bc>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	f7fc fe27 	bl	8000550 <__aeabi_dmul>
 8003902:	4604      	mov	r4, r0
 8003904:	460d      	mov	r5, r1
 8003906:	ec45 4b10 	vmov	d0, r4, r5
 800390a:	f000 fadd 	bl	8003ec8 <__ieee754_sqrt>
 800390e:	a34e      	add	r3, pc, #312	; (adr r3, 8003a48 <__ieee754_acos+0x458>)
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	4620      	mov	r0, r4
 8003916:	4629      	mov	r1, r5
 8003918:	ec59 8b10 	vmov	r8, r9, d0
 800391c:	f7fc fe18 	bl	8000550 <__aeabi_dmul>
 8003920:	a34b      	add	r3, pc, #300	; (adr r3, 8003a50 <__ieee754_acos+0x460>)
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f7fc fc5d 	bl	80001e4 <__adddf3>
 800392a:	4622      	mov	r2, r4
 800392c:	462b      	mov	r3, r5
 800392e:	f7fc fe0f 	bl	8000550 <__aeabi_dmul>
 8003932:	a349      	add	r3, pc, #292	; (adr r3, 8003a58 <__ieee754_acos+0x468>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f7fc fc52 	bl	80001e0 <__aeabi_dsub>
 800393c:	4622      	mov	r2, r4
 800393e:	462b      	mov	r3, r5
 8003940:	f7fc fe06 	bl	8000550 <__aeabi_dmul>
 8003944:	a346      	add	r3, pc, #280	; (adr r3, 8003a60 <__ieee754_acos+0x470>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fc fc4b 	bl	80001e4 <__adddf3>
 800394e:	4622      	mov	r2, r4
 8003950:	462b      	mov	r3, r5
 8003952:	f7fc fdfd 	bl	8000550 <__aeabi_dmul>
 8003956:	a344      	add	r3, pc, #272	; (adr r3, 8003a68 <__ieee754_acos+0x478>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f7fc fc40 	bl	80001e0 <__aeabi_dsub>
 8003960:	4622      	mov	r2, r4
 8003962:	462b      	mov	r3, r5
 8003964:	f7fc fdf4 	bl	8000550 <__aeabi_dmul>
 8003968:	a341      	add	r3, pc, #260	; (adr r3, 8003a70 <__ieee754_acos+0x480>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f7fc fc39 	bl	80001e4 <__adddf3>
 8003972:	4622      	mov	r2, r4
 8003974:	462b      	mov	r3, r5
 8003976:	f7fc fdeb 	bl	8000550 <__aeabi_dmul>
 800397a:	a33f      	add	r3, pc, #252	; (adr r3, 8003a78 <__ieee754_acos+0x488>)
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	4682      	mov	sl, r0
 8003982:	468b      	mov	fp, r1
 8003984:	4620      	mov	r0, r4
 8003986:	4629      	mov	r1, r5
 8003988:	f7fc fde2 	bl	8000550 <__aeabi_dmul>
 800398c:	a33c      	add	r3, pc, #240	; (adr r3, 8003a80 <__ieee754_acos+0x490>)
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f7fc fc25 	bl	80001e0 <__aeabi_dsub>
 8003996:	4622      	mov	r2, r4
 8003998:	462b      	mov	r3, r5
 800399a:	f7fc fdd9 	bl	8000550 <__aeabi_dmul>
 800399e:	a33a      	add	r3, pc, #232	; (adr r3, 8003a88 <__ieee754_acos+0x498>)
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f7fc fc1e 	bl	80001e4 <__adddf3>
 80039a8:	4622      	mov	r2, r4
 80039aa:	462b      	mov	r3, r5
 80039ac:	f7fc fdd0 	bl	8000550 <__aeabi_dmul>
 80039b0:	a337      	add	r3, pc, #220	; (adr r3, 8003a90 <__ieee754_acos+0x4a0>)
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f7fc fc13 	bl	80001e0 <__aeabi_dsub>
 80039ba:	4622      	mov	r2, r4
 80039bc:	462b      	mov	r3, r5
 80039be:	f7fc fdc7 	bl	8000550 <__aeabi_dmul>
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <__ieee754_acos+0x4b8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	f7fc fc0d 	bl	80001e4 <__adddf3>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4650      	mov	r0, sl
 80039d0:	4659      	mov	r1, fp
 80039d2:	f7fc fee7 	bl	80007a4 <__aeabi_ddiv>
 80039d6:	4642      	mov	r2, r8
 80039d8:	464b      	mov	r3, r9
 80039da:	f7fc fdb9 	bl	8000550 <__aeabi_dmul>
 80039de:	2600      	movs	r6, #0
 80039e0:	4682      	mov	sl, r0
 80039e2:	468b      	mov	fp, r1
 80039e4:	4632      	mov	r2, r6
 80039e6:	464b      	mov	r3, r9
 80039e8:	4630      	mov	r0, r6
 80039ea:	4649      	mov	r1, r9
 80039ec:	f7fc fdb0 	bl	8000550 <__aeabi_dmul>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4620      	mov	r0, r4
 80039f6:	4629      	mov	r1, r5
 80039f8:	f7fc fbf2 	bl	80001e0 <__aeabi_dsub>
 80039fc:	4632      	mov	r2, r6
 80039fe:	4604      	mov	r4, r0
 8003a00:	460d      	mov	r5, r1
 8003a02:	464b      	mov	r3, r9
 8003a04:	4640      	mov	r0, r8
 8003a06:	4649      	mov	r1, r9
 8003a08:	f7fc fbec 	bl	80001e4 <__adddf3>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4620      	mov	r0, r4
 8003a12:	4629      	mov	r1, r5
 8003a14:	f7fc fec6 	bl	80007a4 <__aeabi_ddiv>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4650      	mov	r0, sl
 8003a1e:	4659      	mov	r1, fp
 8003a20:	f7fc fbe0 	bl	80001e4 <__adddf3>
 8003a24:	4632      	mov	r2, r6
 8003a26:	464b      	mov	r3, r9
 8003a28:	f7fc fbdc 	bl	80001e4 <__adddf3>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	f7fc fbd8 	bl	80001e4 <__adddf3>
 8003a34:	e5fe      	b.n	8003634 <__ieee754_acos+0x44>
 8003a36:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8003a98 <__ieee754_acos+0x4a8>
 8003a3a:	e5ed      	b.n	8003618 <__ieee754_acos+0x28>
 8003a3c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8003aa0 <__ieee754_acos+0x4b0>
 8003a40:	e5ea      	b.n	8003618 <__ieee754_acos+0x28>
 8003a42:	bf00      	nop
 8003a44:	f3af 8000 	nop.w
 8003a48:	0dfdf709 	.word	0x0dfdf709
 8003a4c:	3f023de1 	.word	0x3f023de1
 8003a50:	7501b288 	.word	0x7501b288
 8003a54:	3f49efe0 	.word	0x3f49efe0
 8003a58:	b5688f3b 	.word	0xb5688f3b
 8003a5c:	3fa48228 	.word	0x3fa48228
 8003a60:	0e884455 	.word	0x0e884455
 8003a64:	3fc9c155 	.word	0x3fc9c155
 8003a68:	03eb6f7d 	.word	0x03eb6f7d
 8003a6c:	3fd4d612 	.word	0x3fd4d612
 8003a70:	55555555 	.word	0x55555555
 8003a74:	3fc55555 	.word	0x3fc55555
 8003a78:	b12e9282 	.word	0xb12e9282
 8003a7c:	3fb3b8c5 	.word	0x3fb3b8c5
 8003a80:	1b8d0159 	.word	0x1b8d0159
 8003a84:	3fe6066c 	.word	0x3fe6066c
 8003a88:	9c598ac8 	.word	0x9c598ac8
 8003a8c:	40002ae5 	.word	0x40002ae5
 8003a90:	1c8a2d4b 	.word	0x1c8a2d4b
 8003a94:	40033a27 	.word	0x40033a27
	...
 8003aa0:	54442d18 	.word	0x54442d18
 8003aa4:	3ff921fb 	.word	0x3ff921fb
 8003aa8:	3ff00000 	.word	0x3ff00000
 8003aac:	3fe00000 	.word	0x3fe00000

08003ab0 <__ieee754_rem_pio2>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	ed2d 8b02 	vpush	{d8}
 8003ab8:	ec55 4b10 	vmov	r4, r5, d0
 8003abc:	4bca      	ldr	r3, [pc, #808]	; (8003de8 <__ieee754_rem_pio2+0x338>)
 8003abe:	b08b      	sub	sp, #44	; 0x2c
 8003ac0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003ac4:	4598      	cmp	r8, r3
 8003ac6:	4682      	mov	sl, r0
 8003ac8:	9502      	str	r5, [sp, #8]
 8003aca:	dc08      	bgt.n	8003ade <__ieee754_rem_pio2+0x2e>
 8003acc:	2200      	movs	r2, #0
 8003ace:	2300      	movs	r3, #0
 8003ad0:	ed80 0b00 	vstr	d0, [r0]
 8003ad4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003ad8:	f04f 0b00 	mov.w	fp, #0
 8003adc:	e028      	b.n	8003b30 <__ieee754_rem_pio2+0x80>
 8003ade:	4bc3      	ldr	r3, [pc, #780]	; (8003dec <__ieee754_rem_pio2+0x33c>)
 8003ae0:	4598      	cmp	r8, r3
 8003ae2:	dc78      	bgt.n	8003bd6 <__ieee754_rem_pio2+0x126>
 8003ae4:	9b02      	ldr	r3, [sp, #8]
 8003ae6:	4ec2      	ldr	r6, [pc, #776]	; (8003df0 <__ieee754_rem_pio2+0x340>)
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	ee10 0a10 	vmov	r0, s0
 8003aee:	a3b0      	add	r3, pc, #704	; (adr r3, 8003db0 <__ieee754_rem_pio2+0x300>)
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	4629      	mov	r1, r5
 8003af6:	dd39      	ble.n	8003b6c <__ieee754_rem_pio2+0xbc>
 8003af8:	f7fc fb72 	bl	80001e0 <__aeabi_dsub>
 8003afc:	45b0      	cmp	r8, r6
 8003afe:	4604      	mov	r4, r0
 8003b00:	460d      	mov	r5, r1
 8003b02:	d01b      	beq.n	8003b3c <__ieee754_rem_pio2+0x8c>
 8003b04:	a3ac      	add	r3, pc, #688	; (adr r3, 8003db8 <__ieee754_rem_pio2+0x308>)
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	f7fc fb69 	bl	80001e0 <__aeabi_dsub>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	e9ca 2300 	strd	r2, r3, [sl]
 8003b16:	4620      	mov	r0, r4
 8003b18:	4629      	mov	r1, r5
 8003b1a:	f7fc fb61 	bl	80001e0 <__aeabi_dsub>
 8003b1e:	a3a6      	add	r3, pc, #664	; (adr r3, 8003db8 <__ieee754_rem_pio2+0x308>)
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f7fc fb5c 	bl	80001e0 <__aeabi_dsub>
 8003b28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003b2c:	f04f 0b01 	mov.w	fp, #1
 8003b30:	4658      	mov	r0, fp
 8003b32:	b00b      	add	sp, #44	; 0x2c
 8003b34:	ecbd 8b02 	vpop	{d8}
 8003b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b3c:	a3a0      	add	r3, pc, #640	; (adr r3, 8003dc0 <__ieee754_rem_pio2+0x310>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc fb4d 	bl	80001e0 <__aeabi_dsub>
 8003b46:	a3a0      	add	r3, pc, #640	; (adr r3, 8003dc8 <__ieee754_rem_pio2+0x318>)
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	460d      	mov	r5, r1
 8003b50:	f7fc fb46 	bl	80001e0 <__aeabi_dsub>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	e9ca 2300 	strd	r2, r3, [sl]
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	4629      	mov	r1, r5
 8003b60:	f7fc fb3e 	bl	80001e0 <__aeabi_dsub>
 8003b64:	a398      	add	r3, pc, #608	; (adr r3, 8003dc8 <__ieee754_rem_pio2+0x318>)
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	e7db      	b.n	8003b24 <__ieee754_rem_pio2+0x74>
 8003b6c:	f7fc fb3a 	bl	80001e4 <__adddf3>
 8003b70:	45b0      	cmp	r8, r6
 8003b72:	4604      	mov	r4, r0
 8003b74:	460d      	mov	r5, r1
 8003b76:	d016      	beq.n	8003ba6 <__ieee754_rem_pio2+0xf6>
 8003b78:	a38f      	add	r3, pc, #572	; (adr r3, 8003db8 <__ieee754_rem_pio2+0x308>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	f7fc fb31 	bl	80001e4 <__adddf3>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	e9ca 2300 	strd	r2, r3, [sl]
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	f7fc fb27 	bl	80001e0 <__aeabi_dsub>
 8003b92:	a389      	add	r3, pc, #548	; (adr r3, 8003db8 <__ieee754_rem_pio2+0x308>)
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f7fc fb24 	bl	80001e4 <__adddf3>
 8003b9c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003ba0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003ba4:	e7c4      	b.n	8003b30 <__ieee754_rem_pio2+0x80>
 8003ba6:	a386      	add	r3, pc, #536	; (adr r3, 8003dc0 <__ieee754_rem_pio2+0x310>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f7fc fb1a 	bl	80001e4 <__adddf3>
 8003bb0:	a385      	add	r3, pc, #532	; (adr r3, 8003dc8 <__ieee754_rem_pio2+0x318>)
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	460d      	mov	r5, r1
 8003bba:	f7fc fb13 	bl	80001e4 <__adddf3>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	e9ca 2300 	strd	r2, r3, [sl]
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	4629      	mov	r1, r5
 8003bca:	f7fc fb09 	bl	80001e0 <__aeabi_dsub>
 8003bce:	a37e      	add	r3, pc, #504	; (adr r3, 8003dc8 <__ieee754_rem_pio2+0x318>)
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	e7e0      	b.n	8003b98 <__ieee754_rem_pio2+0xe8>
 8003bd6:	4b87      	ldr	r3, [pc, #540]	; (8003df4 <__ieee754_rem_pio2+0x344>)
 8003bd8:	4598      	cmp	r8, r3
 8003bda:	f300 80d9 	bgt.w	8003d90 <__ieee754_rem_pio2+0x2e0>
 8003bde:	f000 fefd 	bl	80049dc <fabs>
 8003be2:	ec55 4b10 	vmov	r4, r5, d0
 8003be6:	ee10 0a10 	vmov	r0, s0
 8003bea:	a379      	add	r3, pc, #484	; (adr r3, 8003dd0 <__ieee754_rem_pio2+0x320>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	f7fc fcad 	bl	8000550 <__aeabi_dmul>
 8003bf6:	4b80      	ldr	r3, [pc, #512]	; (8003df8 <__ieee754_rem_pio2+0x348>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f7fc faf3 	bl	80001e4 <__adddf3>
 8003bfe:	f7fc ff57 	bl	8000ab0 <__aeabi_d2iz>
 8003c02:	4683      	mov	fp, r0
 8003c04:	f7fc fc3a 	bl	800047c <__aeabi_i2d>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	ec43 2b18 	vmov	d8, r2, r3
 8003c10:	a367      	add	r3, pc, #412	; (adr r3, 8003db0 <__ieee754_rem_pio2+0x300>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f7fc fc9b 	bl	8000550 <__aeabi_dmul>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4620      	mov	r0, r4
 8003c20:	4629      	mov	r1, r5
 8003c22:	f7fc fadd 	bl	80001e0 <__aeabi_dsub>
 8003c26:	a364      	add	r3, pc, #400	; (adr r3, 8003db8 <__ieee754_rem_pio2+0x308>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	460f      	mov	r7, r1
 8003c30:	ec51 0b18 	vmov	r0, r1, d8
 8003c34:	f7fc fc8c 	bl	8000550 <__aeabi_dmul>
 8003c38:	f1bb 0f1f 	cmp.w	fp, #31
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	460d      	mov	r5, r1
 8003c40:	dc0d      	bgt.n	8003c5e <__ieee754_rem_pio2+0x1ae>
 8003c42:	4b6e      	ldr	r3, [pc, #440]	; (8003dfc <__ieee754_rem_pio2+0x34c>)
 8003c44:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8003c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c4c:	4543      	cmp	r3, r8
 8003c4e:	d006      	beq.n	8003c5e <__ieee754_rem_pio2+0x1ae>
 8003c50:	4622      	mov	r2, r4
 8003c52:	462b      	mov	r3, r5
 8003c54:	4630      	mov	r0, r6
 8003c56:	4639      	mov	r1, r7
 8003c58:	f7fc fac2 	bl	80001e0 <__aeabi_dsub>
 8003c5c:	e00f      	b.n	8003c7e <__ieee754_rem_pio2+0x1ce>
 8003c5e:	462b      	mov	r3, r5
 8003c60:	4622      	mov	r2, r4
 8003c62:	4630      	mov	r0, r6
 8003c64:	4639      	mov	r1, r7
 8003c66:	f7fc fabb 	bl	80001e0 <__aeabi_dsub>
 8003c6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003c6e:	9303      	str	r3, [sp, #12]
 8003c70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003c74:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003c78:	f1b8 0f10 	cmp.w	r8, #16
 8003c7c:	dc02      	bgt.n	8003c84 <__ieee754_rem_pio2+0x1d4>
 8003c7e:	e9ca 0100 	strd	r0, r1, [sl]
 8003c82:	e039      	b.n	8003cf8 <__ieee754_rem_pio2+0x248>
 8003c84:	a34e      	add	r3, pc, #312	; (adr r3, 8003dc0 <__ieee754_rem_pio2+0x310>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	ec51 0b18 	vmov	r0, r1, d8
 8003c8e:	f7fc fc5f 	bl	8000550 <__aeabi_dmul>
 8003c92:	4604      	mov	r4, r0
 8003c94:	460d      	mov	r5, r1
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	4639      	mov	r1, r7
 8003c9e:	f7fc fa9f 	bl	80001e0 <__aeabi_dsub>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4680      	mov	r8, r0
 8003ca8:	4689      	mov	r9, r1
 8003caa:	4630      	mov	r0, r6
 8003cac:	4639      	mov	r1, r7
 8003cae:	f7fc fa97 	bl	80001e0 <__aeabi_dsub>
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	462b      	mov	r3, r5
 8003cb6:	f7fc fa93 	bl	80001e0 <__aeabi_dsub>
 8003cba:	a343      	add	r3, pc, #268	; (adr r3, 8003dc8 <__ieee754_rem_pio2+0x318>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	ec51 0b18 	vmov	r0, r1, d8
 8003cc8:	f7fc fc42 	bl	8000550 <__aeabi_dmul>
 8003ccc:	4622      	mov	r2, r4
 8003cce:	462b      	mov	r3, r5
 8003cd0:	f7fc fa86 	bl	80001e0 <__aeabi_dsub>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4604      	mov	r4, r0
 8003cda:	460d      	mov	r5, r1
 8003cdc:	4640      	mov	r0, r8
 8003cde:	4649      	mov	r1, r9
 8003ce0:	f7fc fa7e 	bl	80001e0 <__aeabi_dsub>
 8003ce4:	9a03      	ldr	r2, [sp, #12]
 8003ce6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b31      	cmp	r3, #49	; 0x31
 8003cee:	dc24      	bgt.n	8003d3a <__ieee754_rem_pio2+0x28a>
 8003cf0:	e9ca 0100 	strd	r0, r1, [sl]
 8003cf4:	4646      	mov	r6, r8
 8003cf6:	464f      	mov	r7, r9
 8003cf8:	e9da 8900 	ldrd	r8, r9, [sl]
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	4642      	mov	r2, r8
 8003d00:	464b      	mov	r3, r9
 8003d02:	4639      	mov	r1, r7
 8003d04:	f7fc fa6c 	bl	80001e0 <__aeabi_dsub>
 8003d08:	462b      	mov	r3, r5
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	f7fc fa68 	bl	80001e0 <__aeabi_dsub>
 8003d10:	9b02      	ldr	r3, [sp, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003d18:	f6bf af0a 	bge.w	8003b30 <__ieee754_rem_pio2+0x80>
 8003d1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003d20:	f8ca 3004 	str.w	r3, [sl, #4]
 8003d24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d28:	f8ca 8000 	str.w	r8, [sl]
 8003d2c:	f8ca 0008 	str.w	r0, [sl, #8]
 8003d30:	f8ca 300c 	str.w	r3, [sl, #12]
 8003d34:	f1cb 0b00 	rsb	fp, fp, #0
 8003d38:	e6fa      	b.n	8003b30 <__ieee754_rem_pio2+0x80>
 8003d3a:	a327      	add	r3, pc, #156	; (adr r3, 8003dd8 <__ieee754_rem_pio2+0x328>)
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	ec51 0b18 	vmov	r0, r1, d8
 8003d44:	f7fc fc04 	bl	8000550 <__aeabi_dmul>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	460d      	mov	r5, r1
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4640      	mov	r0, r8
 8003d52:	4649      	mov	r1, r9
 8003d54:	f7fc fa44 	bl	80001e0 <__aeabi_dsub>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	460f      	mov	r7, r1
 8003d60:	4640      	mov	r0, r8
 8003d62:	4649      	mov	r1, r9
 8003d64:	f7fc fa3c 	bl	80001e0 <__aeabi_dsub>
 8003d68:	4622      	mov	r2, r4
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	f7fc fa38 	bl	80001e0 <__aeabi_dsub>
 8003d70:	a31b      	add	r3, pc, #108	; (adr r3, 8003de0 <__ieee754_rem_pio2+0x330>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	4604      	mov	r4, r0
 8003d78:	460d      	mov	r5, r1
 8003d7a:	ec51 0b18 	vmov	r0, r1, d8
 8003d7e:	f7fc fbe7 	bl	8000550 <__aeabi_dmul>
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	f7fc fa2b 	bl	80001e0 <__aeabi_dsub>
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	460d      	mov	r5, r1
 8003d8e:	e75f      	b.n	8003c50 <__ieee754_rem_pio2+0x1a0>
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <__ieee754_rem_pio2+0x350>)
 8003d92:	4598      	cmp	r8, r3
 8003d94:	dd36      	ble.n	8003e04 <__ieee754_rem_pio2+0x354>
 8003d96:	ee10 2a10 	vmov	r2, s0
 8003d9a:	462b      	mov	r3, r5
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	4629      	mov	r1, r5
 8003da0:	f7fc fa1e 	bl	80001e0 <__aeabi_dsub>
 8003da4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003da8:	e9ca 0100 	strd	r0, r1, [sl]
 8003dac:	e694      	b.n	8003ad8 <__ieee754_rem_pio2+0x28>
 8003dae:	bf00      	nop
 8003db0:	54400000 	.word	0x54400000
 8003db4:	3ff921fb 	.word	0x3ff921fb
 8003db8:	1a626331 	.word	0x1a626331
 8003dbc:	3dd0b461 	.word	0x3dd0b461
 8003dc0:	1a600000 	.word	0x1a600000
 8003dc4:	3dd0b461 	.word	0x3dd0b461
 8003dc8:	2e037073 	.word	0x2e037073
 8003dcc:	3ba3198a 	.word	0x3ba3198a
 8003dd0:	6dc9c883 	.word	0x6dc9c883
 8003dd4:	3fe45f30 	.word	0x3fe45f30
 8003dd8:	2e000000 	.word	0x2e000000
 8003ddc:	3ba3198a 	.word	0x3ba3198a
 8003de0:	252049c1 	.word	0x252049c1
 8003de4:	397b839a 	.word	0x397b839a
 8003de8:	3fe921fb 	.word	0x3fe921fb
 8003dec:	4002d97b 	.word	0x4002d97b
 8003df0:	3ff921fb 	.word	0x3ff921fb
 8003df4:	413921fb 	.word	0x413921fb
 8003df8:	3fe00000 	.word	0x3fe00000
 8003dfc:	08004c44 	.word	0x08004c44
 8003e00:	7fefffff 	.word	0x7fefffff
 8003e04:	ea4f 5428 	mov.w	r4, r8, asr #20
 8003e08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8003e0c:	ee10 0a10 	vmov	r0, s0
 8003e10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8003e14:	ee10 6a10 	vmov	r6, s0
 8003e18:	460f      	mov	r7, r1
 8003e1a:	f7fc fe49 	bl	8000ab0 <__aeabi_d2iz>
 8003e1e:	f7fc fb2d 	bl	800047c <__aeabi_i2d>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4630      	mov	r0, r6
 8003e28:	4639      	mov	r1, r7
 8003e2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e2e:	f7fc f9d7 	bl	80001e0 <__aeabi_dsub>
 8003e32:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <__ieee754_rem_pio2+0x410>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	f7fc fb8b 	bl	8000550 <__aeabi_dmul>
 8003e3a:	460f      	mov	r7, r1
 8003e3c:	4606      	mov	r6, r0
 8003e3e:	f7fc fe37 	bl	8000ab0 <__aeabi_d2iz>
 8003e42:	f7fc fb1b 	bl	800047c <__aeabi_i2d>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	4639      	mov	r1, r7
 8003e4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e52:	f7fc f9c5 	bl	80001e0 <__aeabi_dsub>
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <__ieee754_rem_pio2+0x410>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f7fc fb79 	bl	8000550 <__aeabi_dmul>
 8003e5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003e62:	ad04      	add	r5, sp, #16
 8003e64:	f04f 0803 	mov.w	r8, #3
 8003e68:	46a9      	mov	r9, r5
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	2700      	movs	r7, #0
 8003e6e:	4632      	mov	r2, r6
 8003e70:	463b      	mov	r3, r7
 8003e72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003e76:	46c3      	mov	fp, r8
 8003e78:	3d08      	subs	r5, #8
 8003e7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003e7e:	f7fc fdcf 	bl	8000a20 <__aeabi_dcmpeq>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d1f3      	bne.n	8003e6e <__ieee754_rem_pio2+0x3be>
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <__ieee754_rem_pio2+0x414>)
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	4622      	mov	r2, r4
 8003e90:	465b      	mov	r3, fp
 8003e92:	4651      	mov	r1, sl
 8003e94:	4648      	mov	r0, r9
 8003e96:	f000 f993 	bl	80041c0 <__kernel_rem_pio2>
 8003e9a:	9b02      	ldr	r3, [sp, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	4683      	mov	fp, r0
 8003ea0:	f6bf ae46 	bge.w	8003b30 <__ieee754_rem_pio2+0x80>
 8003ea4:	e9da 2100 	ldrd	r2, r1, [sl]
 8003ea8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003eac:	e9ca 2300 	strd	r2, r3, [sl]
 8003eb0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003eb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003eb8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003ebc:	e73a      	b.n	8003d34 <__ieee754_rem_pio2+0x284>
 8003ebe:	bf00      	nop
 8003ec0:	41700000 	.word	0x41700000
 8003ec4:	08004cc4 	.word	0x08004cc4

08003ec8 <__ieee754_sqrt>:
 8003ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ecc:	ec55 4b10 	vmov	r4, r5, d0
 8003ed0:	4e55      	ldr	r6, [pc, #340]	; (8004028 <__ieee754_sqrt+0x160>)
 8003ed2:	43ae      	bics	r6, r5
 8003ed4:	ee10 0a10 	vmov	r0, s0
 8003ed8:	ee10 3a10 	vmov	r3, s0
 8003edc:	462a      	mov	r2, r5
 8003ede:	4629      	mov	r1, r5
 8003ee0:	d110      	bne.n	8003f04 <__ieee754_sqrt+0x3c>
 8003ee2:	ee10 2a10 	vmov	r2, s0
 8003ee6:	462b      	mov	r3, r5
 8003ee8:	f7fc fb32 	bl	8000550 <__aeabi_dmul>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	f7fc f976 	bl	80001e4 <__adddf3>
 8003ef8:	4604      	mov	r4, r0
 8003efa:	460d      	mov	r5, r1
 8003efc:	ec45 4b10 	vmov	d0, r4, r5
 8003f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f04:	2d00      	cmp	r5, #0
 8003f06:	dc10      	bgt.n	8003f2a <__ieee754_sqrt+0x62>
 8003f08:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003f0c:	4330      	orrs	r0, r6
 8003f0e:	d0f5      	beq.n	8003efc <__ieee754_sqrt+0x34>
 8003f10:	b15d      	cbz	r5, 8003f2a <__ieee754_sqrt+0x62>
 8003f12:	ee10 2a10 	vmov	r2, s0
 8003f16:	462b      	mov	r3, r5
 8003f18:	ee10 0a10 	vmov	r0, s0
 8003f1c:	f7fc f960 	bl	80001e0 <__aeabi_dsub>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	f7fc fc3e 	bl	80007a4 <__aeabi_ddiv>
 8003f28:	e7e6      	b.n	8003ef8 <__ieee754_sqrt+0x30>
 8003f2a:	1512      	asrs	r2, r2, #20
 8003f2c:	d074      	beq.n	8004018 <__ieee754_sqrt+0x150>
 8003f2e:	07d4      	lsls	r4, r2, #31
 8003f30:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8003f34:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8003f38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003f3c:	bf5e      	ittt	pl
 8003f3e:	0fda      	lsrpl	r2, r3, #31
 8003f40:	005b      	lslpl	r3, r3, #1
 8003f42:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8003f46:	2400      	movs	r4, #0
 8003f48:	0fda      	lsrs	r2, r3, #31
 8003f4a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003f4e:	107f      	asrs	r7, r7, #1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2516      	movs	r5, #22
 8003f54:	4620      	mov	r0, r4
 8003f56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003f5a:	1886      	adds	r6, r0, r2
 8003f5c:	428e      	cmp	r6, r1
 8003f5e:	bfde      	ittt	le
 8003f60:	1b89      	suble	r1, r1, r6
 8003f62:	18b0      	addle	r0, r6, r2
 8003f64:	18a4      	addle	r4, r4, r2
 8003f66:	0049      	lsls	r1, r1, #1
 8003f68:	3d01      	subs	r5, #1
 8003f6a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003f6e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003f72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003f76:	d1f0      	bne.n	8003f5a <__ieee754_sqrt+0x92>
 8003f78:	462a      	mov	r2, r5
 8003f7a:	f04f 0e20 	mov.w	lr, #32
 8003f7e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003f82:	4281      	cmp	r1, r0
 8003f84:	eb06 0c05 	add.w	ip, r6, r5
 8003f88:	dc02      	bgt.n	8003f90 <__ieee754_sqrt+0xc8>
 8003f8a:	d113      	bne.n	8003fb4 <__ieee754_sqrt+0xec>
 8003f8c:	459c      	cmp	ip, r3
 8003f8e:	d811      	bhi.n	8003fb4 <__ieee754_sqrt+0xec>
 8003f90:	f1bc 0f00 	cmp.w	ip, #0
 8003f94:	eb0c 0506 	add.w	r5, ip, r6
 8003f98:	da43      	bge.n	8004022 <__ieee754_sqrt+0x15a>
 8003f9a:	2d00      	cmp	r5, #0
 8003f9c:	db41      	blt.n	8004022 <__ieee754_sqrt+0x15a>
 8003f9e:	f100 0801 	add.w	r8, r0, #1
 8003fa2:	1a09      	subs	r1, r1, r0
 8003fa4:	459c      	cmp	ip, r3
 8003fa6:	bf88      	it	hi
 8003fa8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8003fac:	eba3 030c 	sub.w	r3, r3, ip
 8003fb0:	4432      	add	r2, r6
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003fb8:	f1be 0e01 	subs.w	lr, lr, #1
 8003fbc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8003fc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fc4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003fc8:	d1db      	bne.n	8003f82 <__ieee754_sqrt+0xba>
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	d006      	beq.n	8003fdc <__ieee754_sqrt+0x114>
 8003fce:	1c50      	adds	r0, r2, #1
 8003fd0:	bf13      	iteet	ne
 8003fd2:	3201      	addne	r2, #1
 8003fd4:	3401      	addeq	r4, #1
 8003fd6:	4672      	moveq	r2, lr
 8003fd8:	f022 0201 	bicne.w	r2, r2, #1
 8003fdc:	1063      	asrs	r3, r4, #1
 8003fde:	0852      	lsrs	r2, r2, #1
 8003fe0:	07e1      	lsls	r1, r4, #31
 8003fe2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003fe6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003fea:	bf48      	it	mi
 8003fec:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003ff0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	e781      	b.n	8003efc <__ieee754_sqrt+0x34>
 8003ff8:	0ad9      	lsrs	r1, r3, #11
 8003ffa:	3815      	subs	r0, #21
 8003ffc:	055b      	lsls	r3, r3, #21
 8003ffe:	2900      	cmp	r1, #0
 8004000:	d0fa      	beq.n	8003ff8 <__ieee754_sqrt+0x130>
 8004002:	02cd      	lsls	r5, r1, #11
 8004004:	d50a      	bpl.n	800401c <__ieee754_sqrt+0x154>
 8004006:	f1c2 0420 	rsb	r4, r2, #32
 800400a:	fa23 f404 	lsr.w	r4, r3, r4
 800400e:	1e55      	subs	r5, r2, #1
 8004010:	4093      	lsls	r3, r2
 8004012:	4321      	orrs	r1, r4
 8004014:	1b42      	subs	r2, r0, r5
 8004016:	e78a      	b.n	8003f2e <__ieee754_sqrt+0x66>
 8004018:	4610      	mov	r0, r2
 800401a:	e7f0      	b.n	8003ffe <__ieee754_sqrt+0x136>
 800401c:	0049      	lsls	r1, r1, #1
 800401e:	3201      	adds	r2, #1
 8004020:	e7ef      	b.n	8004002 <__ieee754_sqrt+0x13a>
 8004022:	4680      	mov	r8, r0
 8004024:	e7bd      	b.n	8003fa2 <__ieee754_sqrt+0xda>
 8004026:	bf00      	nop
 8004028:	7ff00000 	.word	0x7ff00000
 800402c:	00000000 	.word	0x00000000

08004030 <__kernel_cos>:
 8004030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004034:	ec57 6b10 	vmov	r6, r7, d0
 8004038:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800403c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004040:	ed8d 1b00 	vstr	d1, [sp]
 8004044:	da07      	bge.n	8004056 <__kernel_cos+0x26>
 8004046:	ee10 0a10 	vmov	r0, s0
 800404a:	4639      	mov	r1, r7
 800404c:	f7fc fd30 	bl	8000ab0 <__aeabi_d2iz>
 8004050:	2800      	cmp	r0, #0
 8004052:	f000 8088 	beq.w	8004166 <__kernel_cos+0x136>
 8004056:	4632      	mov	r2, r6
 8004058:	463b      	mov	r3, r7
 800405a:	4630      	mov	r0, r6
 800405c:	4639      	mov	r1, r7
 800405e:	f7fc fa77 	bl	8000550 <__aeabi_dmul>
 8004062:	4b51      	ldr	r3, [pc, #324]	; (80041a8 <__kernel_cos+0x178>)
 8004064:	2200      	movs	r2, #0
 8004066:	4604      	mov	r4, r0
 8004068:	460d      	mov	r5, r1
 800406a:	f7fc fa71 	bl	8000550 <__aeabi_dmul>
 800406e:	a340      	add	r3, pc, #256	; (adr r3, 8004170 <__kernel_cos+0x140>)
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	4682      	mov	sl, r0
 8004076:	468b      	mov	fp, r1
 8004078:	4620      	mov	r0, r4
 800407a:	4629      	mov	r1, r5
 800407c:	f7fc fa68 	bl	8000550 <__aeabi_dmul>
 8004080:	a33d      	add	r3, pc, #244	; (adr r3, 8004178 <__kernel_cos+0x148>)
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f7fc f8ad 	bl	80001e4 <__adddf3>
 800408a:	4622      	mov	r2, r4
 800408c:	462b      	mov	r3, r5
 800408e:	f7fc fa5f 	bl	8000550 <__aeabi_dmul>
 8004092:	a33b      	add	r3, pc, #236	; (adr r3, 8004180 <__kernel_cos+0x150>)
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f7fc f8a2 	bl	80001e0 <__aeabi_dsub>
 800409c:	4622      	mov	r2, r4
 800409e:	462b      	mov	r3, r5
 80040a0:	f7fc fa56 	bl	8000550 <__aeabi_dmul>
 80040a4:	a338      	add	r3, pc, #224	; (adr r3, 8004188 <__kernel_cos+0x158>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f7fc f89b 	bl	80001e4 <__adddf3>
 80040ae:	4622      	mov	r2, r4
 80040b0:	462b      	mov	r3, r5
 80040b2:	f7fc fa4d 	bl	8000550 <__aeabi_dmul>
 80040b6:	a336      	add	r3, pc, #216	; (adr r3, 8004190 <__kernel_cos+0x160>)
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f7fc f890 	bl	80001e0 <__aeabi_dsub>
 80040c0:	4622      	mov	r2, r4
 80040c2:	462b      	mov	r3, r5
 80040c4:	f7fc fa44 	bl	8000550 <__aeabi_dmul>
 80040c8:	a333      	add	r3, pc, #204	; (adr r3, 8004198 <__kernel_cos+0x168>)
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f7fc f889 	bl	80001e4 <__adddf3>
 80040d2:	4622      	mov	r2, r4
 80040d4:	462b      	mov	r3, r5
 80040d6:	f7fc fa3b 	bl	8000550 <__aeabi_dmul>
 80040da:	4622      	mov	r2, r4
 80040dc:	462b      	mov	r3, r5
 80040de:	f7fc fa37 	bl	8000550 <__aeabi_dmul>
 80040e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040e6:	4604      	mov	r4, r0
 80040e8:	460d      	mov	r5, r1
 80040ea:	4630      	mov	r0, r6
 80040ec:	4639      	mov	r1, r7
 80040ee:	f7fc fa2f 	bl	8000550 <__aeabi_dmul>
 80040f2:	460b      	mov	r3, r1
 80040f4:	4602      	mov	r2, r0
 80040f6:	4629      	mov	r1, r5
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7fc f871 	bl	80001e0 <__aeabi_dsub>
 80040fe:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <__kernel_cos+0x17c>)
 8004100:	4598      	cmp	r8, r3
 8004102:	4606      	mov	r6, r0
 8004104:	460f      	mov	r7, r1
 8004106:	dc10      	bgt.n	800412a <__kernel_cos+0xfa>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4650      	mov	r0, sl
 800410e:	4659      	mov	r1, fp
 8004110:	f7fc f866 	bl	80001e0 <__aeabi_dsub>
 8004114:	460b      	mov	r3, r1
 8004116:	4926      	ldr	r1, [pc, #152]	; (80041b0 <__kernel_cos+0x180>)
 8004118:	4602      	mov	r2, r0
 800411a:	2000      	movs	r0, #0
 800411c:	f7fc f860 	bl	80001e0 <__aeabi_dsub>
 8004120:	ec41 0b10 	vmov	d0, r0, r1
 8004124:	b003      	add	sp, #12
 8004126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <__kernel_cos+0x184>)
 800412c:	4920      	ldr	r1, [pc, #128]	; (80041b0 <__kernel_cos+0x180>)
 800412e:	4598      	cmp	r8, r3
 8004130:	bfcc      	ite	gt
 8004132:	4d21      	ldrgt	r5, [pc, #132]	; (80041b8 <__kernel_cos+0x188>)
 8004134:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004138:	2400      	movs	r4, #0
 800413a:	4622      	mov	r2, r4
 800413c:	462b      	mov	r3, r5
 800413e:	2000      	movs	r0, #0
 8004140:	f7fc f84e 	bl	80001e0 <__aeabi_dsub>
 8004144:	4622      	mov	r2, r4
 8004146:	4680      	mov	r8, r0
 8004148:	4689      	mov	r9, r1
 800414a:	462b      	mov	r3, r5
 800414c:	4650      	mov	r0, sl
 800414e:	4659      	mov	r1, fp
 8004150:	f7fc f846 	bl	80001e0 <__aeabi_dsub>
 8004154:	4632      	mov	r2, r6
 8004156:	463b      	mov	r3, r7
 8004158:	f7fc f842 	bl	80001e0 <__aeabi_dsub>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4640      	mov	r0, r8
 8004162:	4649      	mov	r1, r9
 8004164:	e7da      	b.n	800411c <__kernel_cos+0xec>
 8004166:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80041a0 <__kernel_cos+0x170>
 800416a:	e7db      	b.n	8004124 <__kernel_cos+0xf4>
 800416c:	f3af 8000 	nop.w
 8004170:	be8838d4 	.word	0xbe8838d4
 8004174:	bda8fae9 	.word	0xbda8fae9
 8004178:	bdb4b1c4 	.word	0xbdb4b1c4
 800417c:	3e21ee9e 	.word	0x3e21ee9e
 8004180:	809c52ad 	.word	0x809c52ad
 8004184:	3e927e4f 	.word	0x3e927e4f
 8004188:	19cb1590 	.word	0x19cb1590
 800418c:	3efa01a0 	.word	0x3efa01a0
 8004190:	16c15177 	.word	0x16c15177
 8004194:	3f56c16c 	.word	0x3f56c16c
 8004198:	5555554c 	.word	0x5555554c
 800419c:	3fa55555 	.word	0x3fa55555
 80041a0:	00000000 	.word	0x00000000
 80041a4:	3ff00000 	.word	0x3ff00000
 80041a8:	3fe00000 	.word	0x3fe00000
 80041ac:	3fd33332 	.word	0x3fd33332
 80041b0:	3ff00000 	.word	0x3ff00000
 80041b4:	3fe90000 	.word	0x3fe90000
 80041b8:	3fd20000 	.word	0x3fd20000
 80041bc:	00000000 	.word	0x00000000

080041c0 <__kernel_rem_pio2>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	ed2d 8b02 	vpush	{d8}
 80041c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80041cc:	f112 0f14 	cmn.w	r2, #20
 80041d0:	9308      	str	r3, [sp, #32]
 80041d2:	9101      	str	r1, [sp, #4]
 80041d4:	4bc4      	ldr	r3, [pc, #784]	; (80044e8 <__kernel_rem_pio2+0x328>)
 80041d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80041d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80041da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80041de:	9302      	str	r3, [sp, #8]
 80041e0:	9b08      	ldr	r3, [sp, #32]
 80041e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80041e6:	bfa8      	it	ge
 80041e8:	1ed4      	subge	r4, r2, #3
 80041ea:	9306      	str	r3, [sp, #24]
 80041ec:	bfb2      	itee	lt
 80041ee:	2400      	movlt	r4, #0
 80041f0:	2318      	movge	r3, #24
 80041f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80041f6:	f06f 0317 	mvn.w	r3, #23
 80041fa:	fb04 3303 	mla	r3, r4, r3, r3
 80041fe:	eb03 0a02 	add.w	sl, r3, r2
 8004202:	9b02      	ldr	r3, [sp, #8]
 8004204:	9a06      	ldr	r2, [sp, #24]
 8004206:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80044d8 <__kernel_rem_pio2+0x318>
 800420a:	eb03 0802 	add.w	r8, r3, r2
 800420e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004210:	1aa7      	subs	r7, r4, r2
 8004212:	ae22      	add	r6, sp, #136	; 0x88
 8004214:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004218:	2500      	movs	r5, #0
 800421a:	4545      	cmp	r5, r8
 800421c:	dd13      	ble.n	8004246 <__kernel_rem_pio2+0x86>
 800421e:	9b08      	ldr	r3, [sp, #32]
 8004220:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80044d8 <__kernel_rem_pio2+0x318>
 8004224:	aa22      	add	r2, sp, #136	; 0x88
 8004226:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800422a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800422e:	f04f 0800 	mov.w	r8, #0
 8004232:	9b02      	ldr	r3, [sp, #8]
 8004234:	4598      	cmp	r8, r3
 8004236:	dc2f      	bgt.n	8004298 <__kernel_rem_pio2+0xd8>
 8004238:	ed8d 8b04 	vstr	d8, [sp, #16]
 800423c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004240:	462f      	mov	r7, r5
 8004242:	2600      	movs	r6, #0
 8004244:	e01b      	b.n	800427e <__kernel_rem_pio2+0xbe>
 8004246:	42ef      	cmn	r7, r5
 8004248:	d407      	bmi.n	800425a <__kernel_rem_pio2+0x9a>
 800424a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800424e:	f7fc f915 	bl	800047c <__aeabi_i2d>
 8004252:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004256:	3501      	adds	r5, #1
 8004258:	e7df      	b.n	800421a <__kernel_rem_pio2+0x5a>
 800425a:	ec51 0b18 	vmov	r0, r1, d8
 800425e:	e7f8      	b.n	8004252 <__kernel_rem_pio2+0x92>
 8004260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004264:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004268:	f7fc f972 	bl	8000550 <__aeabi_dmul>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004274:	f7fb ffb6 	bl	80001e4 <__adddf3>
 8004278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800427c:	3601      	adds	r6, #1
 800427e:	9b06      	ldr	r3, [sp, #24]
 8004280:	429e      	cmp	r6, r3
 8004282:	f1a7 0708 	sub.w	r7, r7, #8
 8004286:	ddeb      	ble.n	8004260 <__kernel_rem_pio2+0xa0>
 8004288:	ed9d 7b04 	vldr	d7, [sp, #16]
 800428c:	f108 0801 	add.w	r8, r8, #1
 8004290:	ecab 7b02 	vstmia	fp!, {d7}
 8004294:	3508      	adds	r5, #8
 8004296:	e7cc      	b.n	8004232 <__kernel_rem_pio2+0x72>
 8004298:	9b02      	ldr	r3, [sp, #8]
 800429a:	aa0e      	add	r2, sp, #56	; 0x38
 800429c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80042a0:	930d      	str	r3, [sp, #52]	; 0x34
 80042a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80042a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80042a8:	9c02      	ldr	r4, [sp, #8]
 80042aa:	930c      	str	r3, [sp, #48]	; 0x30
 80042ac:	00e3      	lsls	r3, r4, #3
 80042ae:	930a      	str	r3, [sp, #40]	; 0x28
 80042b0:	ab9a      	add	r3, sp, #616	; 0x268
 80042b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80042ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80042be:	ab72      	add	r3, sp, #456	; 0x1c8
 80042c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80042c4:	46c3      	mov	fp, r8
 80042c6:	46a1      	mov	r9, r4
 80042c8:	f1b9 0f00 	cmp.w	r9, #0
 80042cc:	f1a5 0508 	sub.w	r5, r5, #8
 80042d0:	dc77      	bgt.n	80043c2 <__kernel_rem_pio2+0x202>
 80042d2:	ec47 6b10 	vmov	d0, r6, r7
 80042d6:	4650      	mov	r0, sl
 80042d8:	f000 fc12 	bl	8004b00 <scalbn>
 80042dc:	ec57 6b10 	vmov	r6, r7, d0
 80042e0:	2200      	movs	r2, #0
 80042e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80042e6:	ee10 0a10 	vmov	r0, s0
 80042ea:	4639      	mov	r1, r7
 80042ec:	f7fc f930 	bl	8000550 <__aeabi_dmul>
 80042f0:	ec41 0b10 	vmov	d0, r0, r1
 80042f4:	f000 fb7c 	bl	80049f0 <floor>
 80042f8:	4b7c      	ldr	r3, [pc, #496]	; (80044ec <__kernel_rem_pio2+0x32c>)
 80042fa:	ec51 0b10 	vmov	r0, r1, d0
 80042fe:	2200      	movs	r2, #0
 8004300:	f7fc f926 	bl	8000550 <__aeabi_dmul>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4630      	mov	r0, r6
 800430a:	4639      	mov	r1, r7
 800430c:	f7fb ff68 	bl	80001e0 <__aeabi_dsub>
 8004310:	460f      	mov	r7, r1
 8004312:	4606      	mov	r6, r0
 8004314:	f7fc fbcc 	bl	8000ab0 <__aeabi_d2iz>
 8004318:	9004      	str	r0, [sp, #16]
 800431a:	f7fc f8af 	bl	800047c <__aeabi_i2d>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4630      	mov	r0, r6
 8004324:	4639      	mov	r1, r7
 8004326:	f7fb ff5b 	bl	80001e0 <__aeabi_dsub>
 800432a:	f1ba 0f00 	cmp.w	sl, #0
 800432e:	4606      	mov	r6, r0
 8004330:	460f      	mov	r7, r1
 8004332:	dd6d      	ble.n	8004410 <__kernel_rem_pio2+0x250>
 8004334:	1e62      	subs	r2, r4, #1
 8004336:	ab0e      	add	r3, sp, #56	; 0x38
 8004338:	9d04      	ldr	r5, [sp, #16]
 800433a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800433e:	f1ca 0118 	rsb	r1, sl, #24
 8004342:	fa40 f301 	asr.w	r3, r0, r1
 8004346:	441d      	add	r5, r3
 8004348:	408b      	lsls	r3, r1
 800434a:	1ac0      	subs	r0, r0, r3
 800434c:	ab0e      	add	r3, sp, #56	; 0x38
 800434e:	9504      	str	r5, [sp, #16]
 8004350:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004354:	f1ca 0317 	rsb	r3, sl, #23
 8004358:	fa40 fb03 	asr.w	fp, r0, r3
 800435c:	f1bb 0f00 	cmp.w	fp, #0
 8004360:	dd65      	ble.n	800442e <__kernel_rem_pio2+0x26e>
 8004362:	9b04      	ldr	r3, [sp, #16]
 8004364:	2200      	movs	r2, #0
 8004366:	3301      	adds	r3, #1
 8004368:	9304      	str	r3, [sp, #16]
 800436a:	4615      	mov	r5, r2
 800436c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004370:	4294      	cmp	r4, r2
 8004372:	f300 809c 	bgt.w	80044ae <__kernel_rem_pio2+0x2ee>
 8004376:	f1ba 0f00 	cmp.w	sl, #0
 800437a:	dd07      	ble.n	800438c <__kernel_rem_pio2+0x1cc>
 800437c:	f1ba 0f01 	cmp.w	sl, #1
 8004380:	f000 80c0 	beq.w	8004504 <__kernel_rem_pio2+0x344>
 8004384:	f1ba 0f02 	cmp.w	sl, #2
 8004388:	f000 80c6 	beq.w	8004518 <__kernel_rem_pio2+0x358>
 800438c:	f1bb 0f02 	cmp.w	fp, #2
 8004390:	d14d      	bne.n	800442e <__kernel_rem_pio2+0x26e>
 8004392:	4632      	mov	r2, r6
 8004394:	463b      	mov	r3, r7
 8004396:	4956      	ldr	r1, [pc, #344]	; (80044f0 <__kernel_rem_pio2+0x330>)
 8004398:	2000      	movs	r0, #0
 800439a:	f7fb ff21 	bl	80001e0 <__aeabi_dsub>
 800439e:	4606      	mov	r6, r0
 80043a0:	460f      	mov	r7, r1
 80043a2:	2d00      	cmp	r5, #0
 80043a4:	d043      	beq.n	800442e <__kernel_rem_pio2+0x26e>
 80043a6:	4650      	mov	r0, sl
 80043a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80044e0 <__kernel_rem_pio2+0x320>
 80043ac:	f000 fba8 	bl	8004b00 <scalbn>
 80043b0:	4630      	mov	r0, r6
 80043b2:	4639      	mov	r1, r7
 80043b4:	ec53 2b10 	vmov	r2, r3, d0
 80043b8:	f7fb ff12 	bl	80001e0 <__aeabi_dsub>
 80043bc:	4606      	mov	r6, r0
 80043be:	460f      	mov	r7, r1
 80043c0:	e035      	b.n	800442e <__kernel_rem_pio2+0x26e>
 80043c2:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <__kernel_rem_pio2+0x334>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	4630      	mov	r0, r6
 80043c8:	4639      	mov	r1, r7
 80043ca:	f7fc f8c1 	bl	8000550 <__aeabi_dmul>
 80043ce:	f7fc fb6f 	bl	8000ab0 <__aeabi_d2iz>
 80043d2:	f7fc f853 	bl	800047c <__aeabi_i2d>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	ec43 2b18 	vmov	d8, r2, r3
 80043de:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <__kernel_rem_pio2+0x338>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	f7fc f8b5 	bl	8000550 <__aeabi_dmul>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4630      	mov	r0, r6
 80043ec:	4639      	mov	r1, r7
 80043ee:	f7fb fef7 	bl	80001e0 <__aeabi_dsub>
 80043f2:	f7fc fb5d 	bl	8000ab0 <__aeabi_d2iz>
 80043f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80043fa:	f84b 0b04 	str.w	r0, [fp], #4
 80043fe:	ec51 0b18 	vmov	r0, r1, d8
 8004402:	f7fb feef 	bl	80001e4 <__adddf3>
 8004406:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800440a:	4606      	mov	r6, r0
 800440c:	460f      	mov	r7, r1
 800440e:	e75b      	b.n	80042c8 <__kernel_rem_pio2+0x108>
 8004410:	d106      	bne.n	8004420 <__kernel_rem_pio2+0x260>
 8004412:	1e63      	subs	r3, r4, #1
 8004414:	aa0e      	add	r2, sp, #56	; 0x38
 8004416:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800441a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800441e:	e79d      	b.n	800435c <__kernel_rem_pio2+0x19c>
 8004420:	4b36      	ldr	r3, [pc, #216]	; (80044fc <__kernel_rem_pio2+0x33c>)
 8004422:	2200      	movs	r2, #0
 8004424:	f7fc fb1a 	bl	8000a5c <__aeabi_dcmpge>
 8004428:	2800      	cmp	r0, #0
 800442a:	d13d      	bne.n	80044a8 <__kernel_rem_pio2+0x2e8>
 800442c:	4683      	mov	fp, r0
 800442e:	2200      	movs	r2, #0
 8004430:	2300      	movs	r3, #0
 8004432:	4630      	mov	r0, r6
 8004434:	4639      	mov	r1, r7
 8004436:	f7fc faf3 	bl	8000a20 <__aeabi_dcmpeq>
 800443a:	2800      	cmp	r0, #0
 800443c:	f000 80c0 	beq.w	80045c0 <__kernel_rem_pio2+0x400>
 8004440:	1e65      	subs	r5, r4, #1
 8004442:	462b      	mov	r3, r5
 8004444:	2200      	movs	r2, #0
 8004446:	9902      	ldr	r1, [sp, #8]
 8004448:	428b      	cmp	r3, r1
 800444a:	da6c      	bge.n	8004526 <__kernel_rem_pio2+0x366>
 800444c:	2a00      	cmp	r2, #0
 800444e:	f000 8089 	beq.w	8004564 <__kernel_rem_pio2+0x3a4>
 8004452:	ab0e      	add	r3, sp, #56	; 0x38
 8004454:	f1aa 0a18 	sub.w	sl, sl, #24
 8004458:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80ad 	beq.w	80045bc <__kernel_rem_pio2+0x3fc>
 8004462:	4650      	mov	r0, sl
 8004464:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80044e0 <__kernel_rem_pio2+0x320>
 8004468:	f000 fb4a 	bl	8004b00 <scalbn>
 800446c:	ab9a      	add	r3, sp, #616	; 0x268
 800446e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004472:	ec57 6b10 	vmov	r6, r7, d0
 8004476:	00ec      	lsls	r4, r5, #3
 8004478:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800447c:	46aa      	mov	sl, r5
 800447e:	f1ba 0f00 	cmp.w	sl, #0
 8004482:	f280 80d6 	bge.w	8004632 <__kernel_rem_pio2+0x472>
 8004486:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80044d8 <__kernel_rem_pio2+0x318>
 800448a:	462e      	mov	r6, r5
 800448c:	2e00      	cmp	r6, #0
 800448e:	f2c0 8104 	blt.w	800469a <__kernel_rem_pio2+0x4da>
 8004492:	ab72      	add	r3, sp, #456	; 0x1c8
 8004494:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004498:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004500 <__kernel_rem_pio2+0x340>
 800449c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80044a0:	f04f 0800 	mov.w	r8, #0
 80044a4:	1baf      	subs	r7, r5, r6
 80044a6:	e0ea      	b.n	800467e <__kernel_rem_pio2+0x4be>
 80044a8:	f04f 0b02 	mov.w	fp, #2
 80044ac:	e759      	b.n	8004362 <__kernel_rem_pio2+0x1a2>
 80044ae:	f8d8 3000 	ldr.w	r3, [r8]
 80044b2:	b955      	cbnz	r5, 80044ca <__kernel_rem_pio2+0x30a>
 80044b4:	b123      	cbz	r3, 80044c0 <__kernel_rem_pio2+0x300>
 80044b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80044ba:	f8c8 3000 	str.w	r3, [r8]
 80044be:	2301      	movs	r3, #1
 80044c0:	3201      	adds	r2, #1
 80044c2:	f108 0804 	add.w	r8, r8, #4
 80044c6:	461d      	mov	r5, r3
 80044c8:	e752      	b.n	8004370 <__kernel_rem_pio2+0x1b0>
 80044ca:	1acb      	subs	r3, r1, r3
 80044cc:	f8c8 3000 	str.w	r3, [r8]
 80044d0:	462b      	mov	r3, r5
 80044d2:	e7f5      	b.n	80044c0 <__kernel_rem_pio2+0x300>
 80044d4:	f3af 8000 	nop.w
	...
 80044e4:	3ff00000 	.word	0x3ff00000
 80044e8:	08004e10 	.word	0x08004e10
 80044ec:	40200000 	.word	0x40200000
 80044f0:	3ff00000 	.word	0x3ff00000
 80044f4:	3e700000 	.word	0x3e700000
 80044f8:	41700000 	.word	0x41700000
 80044fc:	3fe00000 	.word	0x3fe00000
 8004500:	08004dd0 	.word	0x08004dd0
 8004504:	1e62      	subs	r2, r4, #1
 8004506:	ab0e      	add	r3, sp, #56	; 0x38
 8004508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004510:	a90e      	add	r1, sp, #56	; 0x38
 8004512:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004516:	e739      	b.n	800438c <__kernel_rem_pio2+0x1cc>
 8004518:	1e62      	subs	r2, r4, #1
 800451a:	ab0e      	add	r3, sp, #56	; 0x38
 800451c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004520:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004524:	e7f4      	b.n	8004510 <__kernel_rem_pio2+0x350>
 8004526:	a90e      	add	r1, sp, #56	; 0x38
 8004528:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800452c:	3b01      	subs	r3, #1
 800452e:	430a      	orrs	r2, r1
 8004530:	e789      	b.n	8004446 <__kernel_rem_pio2+0x286>
 8004532:	3301      	adds	r3, #1
 8004534:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004538:	2900      	cmp	r1, #0
 800453a:	d0fa      	beq.n	8004532 <__kernel_rem_pio2+0x372>
 800453c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800453e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8004542:	446a      	add	r2, sp
 8004544:	3a98      	subs	r2, #152	; 0x98
 8004546:	920a      	str	r2, [sp, #40]	; 0x28
 8004548:	9a08      	ldr	r2, [sp, #32]
 800454a:	18e3      	adds	r3, r4, r3
 800454c:	18a5      	adds	r5, r4, r2
 800454e:	aa22      	add	r2, sp, #136	; 0x88
 8004550:	f104 0801 	add.w	r8, r4, #1
 8004554:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004558:	9304      	str	r3, [sp, #16]
 800455a:	9b04      	ldr	r3, [sp, #16]
 800455c:	4543      	cmp	r3, r8
 800455e:	da04      	bge.n	800456a <__kernel_rem_pio2+0x3aa>
 8004560:	461c      	mov	r4, r3
 8004562:	e6a3      	b.n	80042ac <__kernel_rem_pio2+0xec>
 8004564:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004566:	2301      	movs	r3, #1
 8004568:	e7e4      	b.n	8004534 <__kernel_rem_pio2+0x374>
 800456a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800456c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004570:	f7fb ff84 	bl	800047c <__aeabi_i2d>
 8004574:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800457a:	46ab      	mov	fp, r5
 800457c:	461c      	mov	r4, r3
 800457e:	f04f 0900 	mov.w	r9, #0
 8004582:	2600      	movs	r6, #0
 8004584:	2700      	movs	r7, #0
 8004586:	9b06      	ldr	r3, [sp, #24]
 8004588:	4599      	cmp	r9, r3
 800458a:	dd06      	ble.n	800459a <__kernel_rem_pio2+0x3da>
 800458c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800458e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004592:	f108 0801 	add.w	r8, r8, #1
 8004596:	930a      	str	r3, [sp, #40]	; 0x28
 8004598:	e7df      	b.n	800455a <__kernel_rem_pio2+0x39a>
 800459a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800459e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80045a2:	f7fb ffd5 	bl	8000550 <__aeabi_dmul>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4630      	mov	r0, r6
 80045ac:	4639      	mov	r1, r7
 80045ae:	f7fb fe19 	bl	80001e4 <__adddf3>
 80045b2:	f109 0901 	add.w	r9, r9, #1
 80045b6:	4606      	mov	r6, r0
 80045b8:	460f      	mov	r7, r1
 80045ba:	e7e4      	b.n	8004586 <__kernel_rem_pio2+0x3c6>
 80045bc:	3d01      	subs	r5, #1
 80045be:	e748      	b.n	8004452 <__kernel_rem_pio2+0x292>
 80045c0:	ec47 6b10 	vmov	d0, r6, r7
 80045c4:	f1ca 0000 	rsb	r0, sl, #0
 80045c8:	f000 fa9a 	bl	8004b00 <scalbn>
 80045cc:	ec57 6b10 	vmov	r6, r7, d0
 80045d0:	4ba0      	ldr	r3, [pc, #640]	; (8004854 <__kernel_rem_pio2+0x694>)
 80045d2:	ee10 0a10 	vmov	r0, s0
 80045d6:	2200      	movs	r2, #0
 80045d8:	4639      	mov	r1, r7
 80045da:	f7fc fa3f 	bl	8000a5c <__aeabi_dcmpge>
 80045de:	b1f8      	cbz	r0, 8004620 <__kernel_rem_pio2+0x460>
 80045e0:	4b9d      	ldr	r3, [pc, #628]	; (8004858 <__kernel_rem_pio2+0x698>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	4630      	mov	r0, r6
 80045e6:	4639      	mov	r1, r7
 80045e8:	f7fb ffb2 	bl	8000550 <__aeabi_dmul>
 80045ec:	f7fc fa60 	bl	8000ab0 <__aeabi_d2iz>
 80045f0:	4680      	mov	r8, r0
 80045f2:	f7fb ff43 	bl	800047c <__aeabi_i2d>
 80045f6:	4b97      	ldr	r3, [pc, #604]	; (8004854 <__kernel_rem_pio2+0x694>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	f7fb ffa9 	bl	8000550 <__aeabi_dmul>
 80045fe:	460b      	mov	r3, r1
 8004600:	4602      	mov	r2, r0
 8004602:	4639      	mov	r1, r7
 8004604:	4630      	mov	r0, r6
 8004606:	f7fb fdeb 	bl	80001e0 <__aeabi_dsub>
 800460a:	f7fc fa51 	bl	8000ab0 <__aeabi_d2iz>
 800460e:	1c65      	adds	r5, r4, #1
 8004610:	ab0e      	add	r3, sp, #56	; 0x38
 8004612:	f10a 0a18 	add.w	sl, sl, #24
 8004616:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800461a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800461e:	e720      	b.n	8004462 <__kernel_rem_pio2+0x2a2>
 8004620:	4630      	mov	r0, r6
 8004622:	4639      	mov	r1, r7
 8004624:	f7fc fa44 	bl	8000ab0 <__aeabi_d2iz>
 8004628:	ab0e      	add	r3, sp, #56	; 0x38
 800462a:	4625      	mov	r5, r4
 800462c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004630:	e717      	b.n	8004462 <__kernel_rem_pio2+0x2a2>
 8004632:	ab0e      	add	r3, sp, #56	; 0x38
 8004634:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004638:	f7fb ff20 	bl	800047c <__aeabi_i2d>
 800463c:	4632      	mov	r2, r6
 800463e:	463b      	mov	r3, r7
 8004640:	f7fb ff86 	bl	8000550 <__aeabi_dmul>
 8004644:	4b84      	ldr	r3, [pc, #528]	; (8004858 <__kernel_rem_pio2+0x698>)
 8004646:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800464a:	2200      	movs	r2, #0
 800464c:	4630      	mov	r0, r6
 800464e:	4639      	mov	r1, r7
 8004650:	f7fb ff7e 	bl	8000550 <__aeabi_dmul>
 8004654:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004658:	4606      	mov	r6, r0
 800465a:	460f      	mov	r7, r1
 800465c:	e70f      	b.n	800447e <__kernel_rem_pio2+0x2be>
 800465e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004662:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004666:	f7fb ff73 	bl	8000550 <__aeabi_dmul>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004672:	f7fb fdb7 	bl	80001e4 <__adddf3>
 8004676:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800467a:	f108 0801 	add.w	r8, r8, #1
 800467e:	9b02      	ldr	r3, [sp, #8]
 8004680:	4598      	cmp	r8, r3
 8004682:	dc01      	bgt.n	8004688 <__kernel_rem_pio2+0x4c8>
 8004684:	45b8      	cmp	r8, r7
 8004686:	ddea      	ble.n	800465e <__kernel_rem_pio2+0x49e>
 8004688:	ed9d 7b06 	vldr	d7, [sp, #24]
 800468c:	ab4a      	add	r3, sp, #296	; 0x128
 800468e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004692:	ed87 7b00 	vstr	d7, [r7]
 8004696:	3e01      	subs	r6, #1
 8004698:	e6f8      	b.n	800448c <__kernel_rem_pio2+0x2cc>
 800469a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800469c:	2b02      	cmp	r3, #2
 800469e:	dc0b      	bgt.n	80046b8 <__kernel_rem_pio2+0x4f8>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	dc35      	bgt.n	8004710 <__kernel_rem_pio2+0x550>
 80046a4:	d059      	beq.n	800475a <__kernel_rem_pio2+0x59a>
 80046a6:	9b04      	ldr	r3, [sp, #16]
 80046a8:	f003 0007 	and.w	r0, r3, #7
 80046ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80046b0:	ecbd 8b02 	vpop	{d8}
 80046b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d1f3      	bne.n	80046a6 <__kernel_rem_pio2+0x4e6>
 80046be:	ab4a      	add	r3, sp, #296	; 0x128
 80046c0:	4423      	add	r3, r4
 80046c2:	9306      	str	r3, [sp, #24]
 80046c4:	461c      	mov	r4, r3
 80046c6:	469a      	mov	sl, r3
 80046c8:	9502      	str	r5, [sp, #8]
 80046ca:	9b02      	ldr	r3, [sp, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f1aa 0a08 	sub.w	sl, sl, #8
 80046d2:	dc6b      	bgt.n	80047ac <__kernel_rem_pio2+0x5ec>
 80046d4:	46aa      	mov	sl, r5
 80046d6:	f1ba 0f01 	cmp.w	sl, #1
 80046da:	f1a4 0408 	sub.w	r4, r4, #8
 80046de:	f300 8085 	bgt.w	80047ec <__kernel_rem_pio2+0x62c>
 80046e2:	9c06      	ldr	r4, [sp, #24]
 80046e4:	2000      	movs	r0, #0
 80046e6:	3408      	adds	r4, #8
 80046e8:	2100      	movs	r1, #0
 80046ea:	2d01      	cmp	r5, #1
 80046ec:	f300 809d 	bgt.w	800482a <__kernel_rem_pio2+0x66a>
 80046f0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80046f4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80046f8:	f1bb 0f00 	cmp.w	fp, #0
 80046fc:	f040 809b 	bne.w	8004836 <__kernel_rem_pio2+0x676>
 8004700:	9b01      	ldr	r3, [sp, #4]
 8004702:	e9c3 5600 	strd	r5, r6, [r3]
 8004706:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800470a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800470e:	e7ca      	b.n	80046a6 <__kernel_rem_pio2+0x4e6>
 8004710:	3408      	adds	r4, #8
 8004712:	ab4a      	add	r3, sp, #296	; 0x128
 8004714:	441c      	add	r4, r3
 8004716:	462e      	mov	r6, r5
 8004718:	2000      	movs	r0, #0
 800471a:	2100      	movs	r1, #0
 800471c:	2e00      	cmp	r6, #0
 800471e:	da36      	bge.n	800478e <__kernel_rem_pio2+0x5ce>
 8004720:	f1bb 0f00 	cmp.w	fp, #0
 8004724:	d039      	beq.n	800479a <__kernel_rem_pio2+0x5da>
 8004726:	4602      	mov	r2, r0
 8004728:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800472c:	9c01      	ldr	r4, [sp, #4]
 800472e:	e9c4 2300 	strd	r2, r3, [r4]
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800473a:	f7fb fd51 	bl	80001e0 <__aeabi_dsub>
 800473e:	ae4c      	add	r6, sp, #304	; 0x130
 8004740:	2401      	movs	r4, #1
 8004742:	42a5      	cmp	r5, r4
 8004744:	da2c      	bge.n	80047a0 <__kernel_rem_pio2+0x5e0>
 8004746:	f1bb 0f00 	cmp.w	fp, #0
 800474a:	d002      	beq.n	8004752 <__kernel_rem_pio2+0x592>
 800474c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004750:	4619      	mov	r1, r3
 8004752:	9b01      	ldr	r3, [sp, #4]
 8004754:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004758:	e7a5      	b.n	80046a6 <__kernel_rem_pio2+0x4e6>
 800475a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800475e:	eb0d 0403 	add.w	r4, sp, r3
 8004762:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004766:	2000      	movs	r0, #0
 8004768:	2100      	movs	r1, #0
 800476a:	2d00      	cmp	r5, #0
 800476c:	da09      	bge.n	8004782 <__kernel_rem_pio2+0x5c2>
 800476e:	f1bb 0f00 	cmp.w	fp, #0
 8004772:	d002      	beq.n	800477a <__kernel_rem_pio2+0x5ba>
 8004774:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004778:	4619      	mov	r1, r3
 800477a:	9b01      	ldr	r3, [sp, #4]
 800477c:	e9c3 0100 	strd	r0, r1, [r3]
 8004780:	e791      	b.n	80046a6 <__kernel_rem_pio2+0x4e6>
 8004782:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004786:	f7fb fd2d 	bl	80001e4 <__adddf3>
 800478a:	3d01      	subs	r5, #1
 800478c:	e7ed      	b.n	800476a <__kernel_rem_pio2+0x5aa>
 800478e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004792:	f7fb fd27 	bl	80001e4 <__adddf3>
 8004796:	3e01      	subs	r6, #1
 8004798:	e7c0      	b.n	800471c <__kernel_rem_pio2+0x55c>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	e7c5      	b.n	800472c <__kernel_rem_pio2+0x56c>
 80047a0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80047a4:	f7fb fd1e 	bl	80001e4 <__adddf3>
 80047a8:	3401      	adds	r4, #1
 80047aa:	e7ca      	b.n	8004742 <__kernel_rem_pio2+0x582>
 80047ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80047b0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80047b4:	9b02      	ldr	r3, [sp, #8]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	9302      	str	r3, [sp, #8]
 80047ba:	4632      	mov	r2, r6
 80047bc:	463b      	mov	r3, r7
 80047be:	4640      	mov	r0, r8
 80047c0:	4649      	mov	r1, r9
 80047c2:	f7fb fd0f 	bl	80001e4 <__adddf3>
 80047c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4640      	mov	r0, r8
 80047d0:	4649      	mov	r1, r9
 80047d2:	f7fb fd05 	bl	80001e0 <__aeabi_dsub>
 80047d6:	4632      	mov	r2, r6
 80047d8:	463b      	mov	r3, r7
 80047da:	f7fb fd03 	bl	80001e4 <__adddf3>
 80047de:	ed9d 7b08 	vldr	d7, [sp, #32]
 80047e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047e6:	ed8a 7b00 	vstr	d7, [sl]
 80047ea:	e76e      	b.n	80046ca <__kernel_rem_pio2+0x50a>
 80047ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 80047f0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80047f4:	4640      	mov	r0, r8
 80047f6:	4632      	mov	r2, r6
 80047f8:	463b      	mov	r3, r7
 80047fa:	4649      	mov	r1, r9
 80047fc:	f7fb fcf2 	bl	80001e4 <__adddf3>
 8004800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4640      	mov	r0, r8
 800480a:	4649      	mov	r1, r9
 800480c:	f7fb fce8 	bl	80001e0 <__aeabi_dsub>
 8004810:	4632      	mov	r2, r6
 8004812:	463b      	mov	r3, r7
 8004814:	f7fb fce6 	bl	80001e4 <__adddf3>
 8004818:	ed9d 7b02 	vldr	d7, [sp, #8]
 800481c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004820:	ed84 7b00 	vstr	d7, [r4]
 8004824:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004828:	e755      	b.n	80046d6 <__kernel_rem_pio2+0x516>
 800482a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800482e:	f7fb fcd9 	bl	80001e4 <__adddf3>
 8004832:	3d01      	subs	r5, #1
 8004834:	e759      	b.n	80046ea <__kernel_rem_pio2+0x52a>
 8004836:	9b01      	ldr	r3, [sp, #4]
 8004838:	9a01      	ldr	r2, [sp, #4]
 800483a:	601d      	str	r5, [r3, #0]
 800483c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004840:	605c      	str	r4, [r3, #4]
 8004842:	609f      	str	r7, [r3, #8]
 8004844:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004848:	60d3      	str	r3, [r2, #12]
 800484a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800484e:	6110      	str	r0, [r2, #16]
 8004850:	6153      	str	r3, [r2, #20]
 8004852:	e728      	b.n	80046a6 <__kernel_rem_pio2+0x4e6>
 8004854:	41700000 	.word	0x41700000
 8004858:	3e700000 	.word	0x3e700000
 800485c:	00000000 	.word	0x00000000

08004860 <__kernel_sin>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	ed2d 8b04 	vpush	{d8-d9}
 8004868:	eeb0 8a41 	vmov.f32	s16, s2
 800486c:	eef0 8a61 	vmov.f32	s17, s3
 8004870:	ec55 4b10 	vmov	r4, r5, d0
 8004874:	b083      	sub	sp, #12
 8004876:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800487a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800487e:	9001      	str	r0, [sp, #4]
 8004880:	da06      	bge.n	8004890 <__kernel_sin+0x30>
 8004882:	ee10 0a10 	vmov	r0, s0
 8004886:	4629      	mov	r1, r5
 8004888:	f7fc f912 	bl	8000ab0 <__aeabi_d2iz>
 800488c:	2800      	cmp	r0, #0
 800488e:	d051      	beq.n	8004934 <__kernel_sin+0xd4>
 8004890:	4622      	mov	r2, r4
 8004892:	462b      	mov	r3, r5
 8004894:	4620      	mov	r0, r4
 8004896:	4629      	mov	r1, r5
 8004898:	f7fb fe5a 	bl	8000550 <__aeabi_dmul>
 800489c:	4682      	mov	sl, r0
 800489e:	468b      	mov	fp, r1
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4620      	mov	r0, r4
 80048a6:	4629      	mov	r1, r5
 80048a8:	f7fb fe52 	bl	8000550 <__aeabi_dmul>
 80048ac:	a341      	add	r3, pc, #260	; (adr r3, 80049b4 <__kernel_sin+0x154>)
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	4680      	mov	r8, r0
 80048b4:	4689      	mov	r9, r1
 80048b6:	4650      	mov	r0, sl
 80048b8:	4659      	mov	r1, fp
 80048ba:	f7fb fe49 	bl	8000550 <__aeabi_dmul>
 80048be:	a33f      	add	r3, pc, #252	; (adr r3, 80049bc <__kernel_sin+0x15c>)
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f7fb fc8c 	bl	80001e0 <__aeabi_dsub>
 80048c8:	4652      	mov	r2, sl
 80048ca:	465b      	mov	r3, fp
 80048cc:	f7fb fe40 	bl	8000550 <__aeabi_dmul>
 80048d0:	a33c      	add	r3, pc, #240	; (adr r3, 80049c4 <__kernel_sin+0x164>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f7fb fc85 	bl	80001e4 <__adddf3>
 80048da:	4652      	mov	r2, sl
 80048dc:	465b      	mov	r3, fp
 80048de:	f7fb fe37 	bl	8000550 <__aeabi_dmul>
 80048e2:	a33a      	add	r3, pc, #232	; (adr r3, 80049cc <__kernel_sin+0x16c>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fc7a 	bl	80001e0 <__aeabi_dsub>
 80048ec:	4652      	mov	r2, sl
 80048ee:	465b      	mov	r3, fp
 80048f0:	f7fb fe2e 	bl	8000550 <__aeabi_dmul>
 80048f4:	a337      	add	r3, pc, #220	; (adr r3, 80049d4 <__kernel_sin+0x174>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fb fc73 	bl	80001e4 <__adddf3>
 80048fe:	9b01      	ldr	r3, [sp, #4]
 8004900:	4606      	mov	r6, r0
 8004902:	460f      	mov	r7, r1
 8004904:	b9eb      	cbnz	r3, 8004942 <__kernel_sin+0xe2>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4650      	mov	r0, sl
 800490c:	4659      	mov	r1, fp
 800490e:	f7fb fe1f 	bl	8000550 <__aeabi_dmul>
 8004912:	a325      	add	r3, pc, #148	; (adr r3, 80049a8 <__kernel_sin+0x148>)
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fb fc62 	bl	80001e0 <__aeabi_dsub>
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	f7fb fe16 	bl	8000550 <__aeabi_dmul>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4620      	mov	r0, r4
 800492a:	4629      	mov	r1, r5
 800492c:	f7fb fc5a 	bl	80001e4 <__adddf3>
 8004930:	4604      	mov	r4, r0
 8004932:	460d      	mov	r5, r1
 8004934:	ec45 4b10 	vmov	d0, r4, r5
 8004938:	b003      	add	sp, #12
 800493a:	ecbd 8b04 	vpop	{d8-d9}
 800493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004942:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <__kernel_sin+0x150>)
 8004944:	ec51 0b18 	vmov	r0, r1, d8
 8004948:	2200      	movs	r2, #0
 800494a:	f7fb fe01 	bl	8000550 <__aeabi_dmul>
 800494e:	4632      	mov	r2, r6
 8004950:	ec41 0b19 	vmov	d9, r0, r1
 8004954:	463b      	mov	r3, r7
 8004956:	4640      	mov	r0, r8
 8004958:	4649      	mov	r1, r9
 800495a:	f7fb fdf9 	bl	8000550 <__aeabi_dmul>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	ec51 0b19 	vmov	r0, r1, d9
 8004966:	f7fb fc3b 	bl	80001e0 <__aeabi_dsub>
 800496a:	4652      	mov	r2, sl
 800496c:	465b      	mov	r3, fp
 800496e:	f7fb fdef 	bl	8000550 <__aeabi_dmul>
 8004972:	ec53 2b18 	vmov	r2, r3, d8
 8004976:	f7fb fc33 	bl	80001e0 <__aeabi_dsub>
 800497a:	a30b      	add	r3, pc, #44	; (adr r3, 80049a8 <__kernel_sin+0x148>)
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	4606      	mov	r6, r0
 8004982:	460f      	mov	r7, r1
 8004984:	4640      	mov	r0, r8
 8004986:	4649      	mov	r1, r9
 8004988:	f7fb fde2 	bl	8000550 <__aeabi_dmul>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4630      	mov	r0, r6
 8004992:	4639      	mov	r1, r7
 8004994:	f7fb fc26 	bl	80001e4 <__adddf3>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	f7fb fc1e 	bl	80001e0 <__aeabi_dsub>
 80049a4:	e7c4      	b.n	8004930 <__kernel_sin+0xd0>
 80049a6:	bf00      	nop
 80049a8:	55555549 	.word	0x55555549
 80049ac:	3fc55555 	.word	0x3fc55555
 80049b0:	3fe00000 	.word	0x3fe00000
 80049b4:	5acfd57c 	.word	0x5acfd57c
 80049b8:	3de5d93a 	.word	0x3de5d93a
 80049bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80049c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80049c4:	57b1fe7d 	.word	0x57b1fe7d
 80049c8:	3ec71de3 	.word	0x3ec71de3
 80049cc:	19c161d5 	.word	0x19c161d5
 80049d0:	3f2a01a0 	.word	0x3f2a01a0
 80049d4:	1110f8a6 	.word	0x1110f8a6
 80049d8:	3f811111 	.word	0x3f811111

080049dc <fabs>:
 80049dc:	ec51 0b10 	vmov	r0, r1, d0
 80049e0:	ee10 2a10 	vmov	r2, s0
 80049e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049e8:	ec43 2b10 	vmov	d0, r2, r3
 80049ec:	4770      	bx	lr
	...

080049f0 <floor>:
 80049f0:	ec51 0b10 	vmov	r0, r1, d0
 80049f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80049fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004a00:	2e13      	cmp	r6, #19
 8004a02:	ee10 5a10 	vmov	r5, s0
 8004a06:	ee10 8a10 	vmov	r8, s0
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	dc32      	bgt.n	8004a74 <floor+0x84>
 8004a0e:	2e00      	cmp	r6, #0
 8004a10:	da14      	bge.n	8004a3c <floor+0x4c>
 8004a12:	a333      	add	r3, pc, #204	; (adr r3, 8004ae0 <floor+0xf0>)
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	f7fb fbe4 	bl	80001e4 <__adddf3>
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f7fc f826 	bl	8000a70 <__aeabi_dcmpgt>
 8004a24:	b138      	cbz	r0, 8004a36 <floor+0x46>
 8004a26:	2c00      	cmp	r4, #0
 8004a28:	da57      	bge.n	8004ada <floor+0xea>
 8004a2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004a2e:	431d      	orrs	r5, r3
 8004a30:	d001      	beq.n	8004a36 <floor+0x46>
 8004a32:	4c2d      	ldr	r4, [pc, #180]	; (8004ae8 <floor+0xf8>)
 8004a34:	2500      	movs	r5, #0
 8004a36:	4621      	mov	r1, r4
 8004a38:	4628      	mov	r0, r5
 8004a3a:	e025      	b.n	8004a88 <floor+0x98>
 8004a3c:	4f2b      	ldr	r7, [pc, #172]	; (8004aec <floor+0xfc>)
 8004a3e:	4137      	asrs	r7, r6
 8004a40:	ea01 0307 	and.w	r3, r1, r7
 8004a44:	4303      	orrs	r3, r0
 8004a46:	d01f      	beq.n	8004a88 <floor+0x98>
 8004a48:	a325      	add	r3, pc, #148	; (adr r3, 8004ae0 <floor+0xf0>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f7fb fbc9 	bl	80001e4 <__adddf3>
 8004a52:	2200      	movs	r2, #0
 8004a54:	2300      	movs	r3, #0
 8004a56:	f7fc f80b 	bl	8000a70 <__aeabi_dcmpgt>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d0eb      	beq.n	8004a36 <floor+0x46>
 8004a5e:	2c00      	cmp	r4, #0
 8004a60:	bfbe      	ittt	lt
 8004a62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004a66:	fa43 f606 	asrlt.w	r6, r3, r6
 8004a6a:	19a4      	addlt	r4, r4, r6
 8004a6c:	ea24 0407 	bic.w	r4, r4, r7
 8004a70:	2500      	movs	r5, #0
 8004a72:	e7e0      	b.n	8004a36 <floor+0x46>
 8004a74:	2e33      	cmp	r6, #51	; 0x33
 8004a76:	dd0b      	ble.n	8004a90 <floor+0xa0>
 8004a78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004a7c:	d104      	bne.n	8004a88 <floor+0x98>
 8004a7e:	ee10 2a10 	vmov	r2, s0
 8004a82:	460b      	mov	r3, r1
 8004a84:	f7fb fbae 	bl	80001e4 <__adddf3>
 8004a88:	ec41 0b10 	vmov	d0, r0, r1
 8004a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a98:	fa23 f707 	lsr.w	r7, r3, r7
 8004a9c:	4207      	tst	r7, r0
 8004a9e:	d0f3      	beq.n	8004a88 <floor+0x98>
 8004aa0:	a30f      	add	r3, pc, #60	; (adr r3, 8004ae0 <floor+0xf0>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f7fb fb9d 	bl	80001e4 <__adddf3>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2300      	movs	r3, #0
 8004aae:	f7fb ffdf 	bl	8000a70 <__aeabi_dcmpgt>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d0bf      	beq.n	8004a36 <floor+0x46>
 8004ab6:	2c00      	cmp	r4, #0
 8004ab8:	da02      	bge.n	8004ac0 <floor+0xd0>
 8004aba:	2e14      	cmp	r6, #20
 8004abc:	d103      	bne.n	8004ac6 <floor+0xd6>
 8004abe:	3401      	adds	r4, #1
 8004ac0:	ea25 0507 	bic.w	r5, r5, r7
 8004ac4:	e7b7      	b.n	8004a36 <floor+0x46>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004acc:	fa03 f606 	lsl.w	r6, r3, r6
 8004ad0:	4435      	add	r5, r6
 8004ad2:	4545      	cmp	r5, r8
 8004ad4:	bf38      	it	cc
 8004ad6:	18e4      	addcc	r4, r4, r3
 8004ad8:	e7f2      	b.n	8004ac0 <floor+0xd0>
 8004ada:	2500      	movs	r5, #0
 8004adc:	462c      	mov	r4, r5
 8004ade:	e7aa      	b.n	8004a36 <floor+0x46>
 8004ae0:	8800759c 	.word	0x8800759c
 8004ae4:	7e37e43c 	.word	0x7e37e43c
 8004ae8:	bff00000 	.word	0xbff00000
 8004aec:	000fffff 	.word	0x000fffff

08004af0 <nan>:
 8004af0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004af8 <nan+0x8>
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	00000000 	.word	0x00000000
 8004afc:	7ff80000 	.word	0x7ff80000

08004b00 <scalbn>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	ec55 4b10 	vmov	r4, r5, d0
 8004b06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	b99a      	cbnz	r2, 8004b38 <scalbn+0x38>
 8004b10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004b14:	4323      	orrs	r3, r4
 8004b16:	d036      	beq.n	8004b86 <scalbn+0x86>
 8004b18:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <scalbn+0x100>)
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	ee10 0a10 	vmov	r0, s0
 8004b20:	2200      	movs	r2, #0
 8004b22:	f7fb fd15 	bl	8000550 <__aeabi_dmul>
 8004b26:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <scalbn+0x104>)
 8004b28:	429e      	cmp	r6, r3
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	460d      	mov	r5, r1
 8004b2e:	da10      	bge.n	8004b52 <scalbn+0x52>
 8004b30:	a32b      	add	r3, pc, #172	; (adr r3, 8004be0 <scalbn+0xe0>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	e03a      	b.n	8004bae <scalbn+0xae>
 8004b38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004b3c:	428a      	cmp	r2, r1
 8004b3e:	d10c      	bne.n	8004b5a <scalbn+0x5a>
 8004b40:	ee10 2a10 	vmov	r2, s0
 8004b44:	4620      	mov	r0, r4
 8004b46:	4629      	mov	r1, r5
 8004b48:	f7fb fb4c 	bl	80001e4 <__adddf3>
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	460d      	mov	r5, r1
 8004b50:	e019      	b.n	8004b86 <scalbn+0x86>
 8004b52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004b56:	460b      	mov	r3, r1
 8004b58:	3a36      	subs	r2, #54	; 0x36
 8004b5a:	4432      	add	r2, r6
 8004b5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004b60:	428a      	cmp	r2, r1
 8004b62:	dd08      	ble.n	8004b76 <scalbn+0x76>
 8004b64:	2d00      	cmp	r5, #0
 8004b66:	a120      	add	r1, pc, #128	; (adr r1, 8004be8 <scalbn+0xe8>)
 8004b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b6c:	da1c      	bge.n	8004ba8 <scalbn+0xa8>
 8004b6e:	a120      	add	r1, pc, #128	; (adr r1, 8004bf0 <scalbn+0xf0>)
 8004b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b74:	e018      	b.n	8004ba8 <scalbn+0xa8>
 8004b76:	2a00      	cmp	r2, #0
 8004b78:	dd08      	ble.n	8004b8c <scalbn+0x8c>
 8004b7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004b86:	ec45 4b10 	vmov	d0, r4, r5
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004b90:	da19      	bge.n	8004bc6 <scalbn+0xc6>
 8004b92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004b96:	429e      	cmp	r6, r3
 8004b98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004b9c:	dd0a      	ble.n	8004bb4 <scalbn+0xb4>
 8004b9e:	a112      	add	r1, pc, #72	; (adr r1, 8004be8 <scalbn+0xe8>)
 8004ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e2      	bne.n	8004b6e <scalbn+0x6e>
 8004ba8:	a30f      	add	r3, pc, #60	; (adr r3, 8004be8 <scalbn+0xe8>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fccf 	bl	8000550 <__aeabi_dmul>
 8004bb2:	e7cb      	b.n	8004b4c <scalbn+0x4c>
 8004bb4:	a10a      	add	r1, pc, #40	; (adr r1, 8004be0 <scalbn+0xe0>)
 8004bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0b8      	beq.n	8004b30 <scalbn+0x30>
 8004bbe:	a10e      	add	r1, pc, #56	; (adr r1, 8004bf8 <scalbn+0xf8>)
 8004bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bc4:	e7b4      	b.n	8004b30 <scalbn+0x30>
 8004bc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004bca:	3236      	adds	r2, #54	; 0x36
 8004bcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <scalbn+0x108>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	e7e8      	b.n	8004bae <scalbn+0xae>
 8004bdc:	f3af 8000 	nop.w
 8004be0:	c2f8f359 	.word	0xc2f8f359
 8004be4:	01a56e1f 	.word	0x01a56e1f
 8004be8:	8800759c 	.word	0x8800759c
 8004bec:	7e37e43c 	.word	0x7e37e43c
 8004bf0:	8800759c 	.word	0x8800759c
 8004bf4:	fe37e43c 	.word	0xfe37e43c
 8004bf8:	c2f8f359 	.word	0xc2f8f359
 8004bfc:	81a56e1f 	.word	0x81a56e1f
 8004c00:	43500000 	.word	0x43500000
 8004c04:	ffff3cb0 	.word	0xffff3cb0
 8004c08:	3c900000 	.word	0x3c900000

08004c0c <_init>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr

08004c18 <_fini>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr
